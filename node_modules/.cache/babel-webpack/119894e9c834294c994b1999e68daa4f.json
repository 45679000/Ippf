{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, LOCALE_ID, Injectable, Inject, Optional, ElementRef, Component, Input, NgModule } from '@angular/core';\n\nclass GoogleChartsDataTable {\n  constructor(opt) {\n    this.opt = opt;\n    this.dataTableChanged = new EventEmitter();\n\n    if (opt) {\n      this._setDataTable(opt.dataTable, opt.firstRowIsData);\n    }\n  }\n\n  send() {\n    if (this.query === undefined) {\n      return;\n    }\n\n    this.query.send(queryResponse => {\n      this.setDataTable(queryResponse.getDataTable());\n\n      if (this.opt.queryCallback) {\n        this.opt.queryCallback(queryResponse);\n      }\n    });\n  }\n\n  init(opt) {\n    if (opt) {\n      this.opt = opt;\n    }\n\n    if (this.tid !== undefined) {\n      // doesn't work, see https://github.com/google/google-visualization-issues/issues/2381\n      // this.query.abort();\n      window.clearInterval(this.tid);\n      this.tid = undefined;\n    }\n\n    if (this.opt.dataSourceUrl) {\n      this.query = new google.visualization.Query(this.opt.dataSourceUrl);\n\n      if (this.opt.query) {\n        this.query.setQuery(this.opt.query);\n      }\n\n      if (this.opt.timeout !== undefined) {\n        this.query.setTimeout(this.opt.timeout);\n      }\n\n      if (this.opt.refreshInterval) {\n        // this.query.setRefreshInterval(this.opt.refreshInterval);\n        this.tid = window.setInterval(() => {\n          this.send();\n        }, this.opt.refreshInterval * 1000);\n      }\n\n      this.send();\n    } else {\n      this.setDataTable(this.opt.dataTable);\n    }\n  }\n  /**\n   * @returns Underlying google.visualization.DataTable\n   */\n\n\n  getDataTable() {\n    return this.dataTable;\n  }\n\n  setDataTable(dt, firstRowIsData) {\n    if (firstRowIsData === undefined) {\n      firstRowIsData = this.opt.firstRowIsData;\n    }\n\n    this._setDataTable(dt, firstRowIsData);\n\n    this.dataTableChanged.emit(this.dataTable);\n  }\n\n  _setDataTable(dt, firstRowIsData) {\n    if (Array.isArray(dt)) {\n      dt = google.visualization.arrayToDataTable(dt, firstRowIsData);\n    }\n\n    this.dataTable = dt;\n    this.reformat();\n  }\n  /**\n   * Applies formatters to data columns, if defined\n   */\n\n\n  reformat() {\n    const dt = this.dataTable;\n\n    if (dt === undefined) {\n      return;\n    }\n\n    if (this.opt.formatters === undefined) {\n      return;\n    }\n\n    for (const formatterConfig of this.opt.formatters) {\n      let formatter;\n\n      if (formatterConfig.type === 'PatternFormat') {\n        const fmtOptions = formatterConfig.options;\n        formatter = new google.visualization.PatternFormat(fmtOptions.pattern);\n        formatter.format(dt, formatterConfig.columns, fmtOptions.dstColumnIndex);\n        continue;\n      }\n\n      const formatterConstructor = google.visualization[formatterConfig.type];\n      const formatterOptions = formatterConfig.options;\n      formatter = new formatterConstructor(formatterOptions);\n\n      if (formatterConfig.type === 'ColorFormat' && formatterOptions) {\n        const fmtOptions = formatterOptions;\n\n        if (fmtOptions.ranges) {\n          for (const range of fmtOptions.ranges) {\n            if (typeof range.fromBgColor !== 'undefined' && typeof range.toBgColor !== 'undefined') {\n              formatter.addGradientRange(range.from, range.to, range.color, range.fromBgColor, range.toBgColor);\n            } else {\n              formatter.addRange(range.from, range.to, range.color, range.bgcolor);\n            }\n          }\n        }\n      }\n\n      for (const col of formatterConfig.columns) {\n        formatter.format(dt, col);\n      }\n    }\n  }\n\n}\n\nGoogleChartsDataTable.ɵfac = function GoogleChartsDataTable_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\nGoogleChartsDataTable.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: GoogleChartsDataTable,\n  outputs: {\n    dataTableChanged: \"dataTableChanged\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsDataTable, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: undefined\n    }];\n  }, {\n    dataTableChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ChartHTMLTooltip {\n  constructor(el) {\n    this.el = el;\n  }\n\n  setPosition(x, y) {\n    this.el.nativeElement.style.left = x + ChartHTMLTooltip.PIXELS;\n    this.el.nativeElement.style.top = y + ChartHTMLTooltip.PIXELS;\n  }\n\n  getDOMElement() {\n    return this.el;\n  }\n\n}\n\nChartHTMLTooltip.PIXELS = 'px';\n\nclass GoogleChartsLoaderService {\n  constructor(localeId, googleChartsSettings) {\n    this.googleChartsSettings = googleChartsSettings;\n    this.loadedPackages = [];\n    this.loaded = false;\n    const defaultSettings = {\n      googleChartsVersion: '50',\n      language: localeId\n    };\n    this.googleChartsSettings = Object.assign(Object.assign({}, defaultSettings), this.googleChartsSettings);\n    this.googleScriptLoadingNotifier = new EventEmitter();\n    this.googleChartLoadingNotifier = new EventEmitter();\n    this.googleScriptIsLoading = false;\n    this.googleChartIsLoading = false;\n    this.loadGoogleChartsScriptPromise = new Promise((resolve, reject) => {\n      if (typeof google !== 'undefined' && google.charts) {\n        resolve();\n      } else if (!this.googleScriptIsLoading) {\n        this.googleScriptIsLoading = true;\n        const script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'https://www.gstatic.com/charts/loader.js';\n        script.async = true;\n        script.defer = true;\n\n        script.onload = () => {\n          this.googleScriptIsLoading = false;\n          this.googleScriptLoadingNotifier.emit(true);\n          resolve();\n        };\n\n        script.onerror = () => {\n          this.googleScriptIsLoading = false;\n          this.googleScriptLoadingNotifier.emit(false);\n          reject();\n        };\n\n        document.getElementsByTagName('head')[0].appendChild(script);\n      } else {\n        this.googleScriptLoadingNotifier.subscribe(loaded => {\n          if (loaded) {\n            resolve();\n          } else {\n            reject();\n          }\n        });\n      }\n    });\n  }\n\n  load(settings) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.loadGoogleChartsScriptPromise;\n      yield new Promise(resolve => {\n        if (this.googleChartIsLoading) {\n          this.googleChartLoadingNotifier.subscribe(() => {\n            this.doLoad(resolve, settings);\n          });\n          return;\n        }\n\n        this.doLoad(resolve, settings);\n      });\n    });\n  }\n\n  doLoad(resolve, settings) {\n    settings = Object.assign(Object.assign({}, this.googleChartsSettings), settings);\n\n    if (!settings.packages && this.loaded) {\n      resolve();\n      return;\n    }\n\n    if (settings.packages) {\n      let pkgs = settings.packages.filter(p => this.loadedPackages.indexOf(p) < 0);\n\n      if (pkgs.length == 0 && this.loaded) {\n        resolve();\n        return;\n      }\n\n      settings.packages = pkgs;\n    }\n\n    const _settings = settings;\n\n    _settings.callback = () => {\n      this.googleChartIsLoading = false;\n\n      if (_settings.packages !== undefined) {\n        this.loadedPackages = this.loadedPackages.concat(_settings.packages);\n      }\n\n      this.loaded = true;\n      this.googleChartLoadingNotifier.emit();\n      resolve();\n    };\n\n    this.googleChartIsLoading = true;\n    google.charts.load(settings.googleChartsVersion, _settings);\n  }\n\n}\n\nGoogleChartsLoaderService.ɵfac = function GoogleChartsLoaderService_Factory(t) {\n  return new (t || GoogleChartsLoaderService)(i0.ɵɵinject(LOCALE_ID), i0.ɵɵinject('googleChartsSettings', 8));\n};\n\nGoogleChartsLoaderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: GoogleChartsLoaderService,\n  factory: GoogleChartsLoaderService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsLoaderService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: ['googleChartsSettings']\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nvar GoogleChartType;\n\n(function (GoogleChartType) {\n  GoogleChartType[\"AnnotationChart\"] = \"AnnotationChart\";\n  GoogleChartType[\"AreaChart\"] = \"AreaChart\";\n  GoogleChartType[\"BarChart\"] = \"BarChart\";\n  GoogleChartType[\"BubbleChart\"] = \"BubbleChart\";\n  GoogleChartType[\"Calendar\"] = \"Calendar\";\n  GoogleChartType[\"CandlestickChart\"] = \"CandlestickChart\";\n  GoogleChartType[\"ColumnChart\"] = \"ColumnChart\";\n  GoogleChartType[\"ComboChart\"] = \"ComboChart\";\n  GoogleChartType[\"Gantt\"] = \"Gantt\";\n  GoogleChartType[\"Gauge\"] = \"Gauge\";\n  GoogleChartType[\"GeoChart\"] = \"GeoChart\";\n  GoogleChartType[\"Histogram\"] = \"Histogram\";\n  GoogleChartType[\"LineChart\"] = \"LineChart\";\n  GoogleChartType[\"Map\"] = \"Map\";\n  GoogleChartType[\"OrgChart\"] = \"OrgChart\";\n  GoogleChartType[\"PieChart\"] = \"PieChart\";\n  GoogleChartType[\"Sankey\"] = \"Sankey\";\n  GoogleChartType[\"ScatterChart\"] = \"ScatterChart\";\n  GoogleChartType[\"SteppedAreaChart\"] = \"SteppedAreaChart\";\n  GoogleChartType[\"Table\"] = \"Table\";\n  GoogleChartType[\"Timeline\"] = \"Timeline\";\n  GoogleChartType[\"TreeMap\"] = \"TreeMap\";\n  GoogleChartType[\"VegaChart\"] = \"VegaChart\";\n  GoogleChartType[\"WordTree\"] = \"WordTree\";\n})(GoogleChartType || (GoogleChartType = {}));\n\nclass GoogleChartComponent {\n  constructor(el, loaderService) {\n    this.el = el;\n    this.loaderService = loaderService;\n\n    this.selectListener = () => {\n      const event = {\n        message: 'select',\n        row: null,\n        column: null,\n        selectedRowValues: [],\n        selectedRowFormattedValues: [],\n        columnLabel: ''\n      };\n      const s = this.wrapper.visualization.getSelection();\n      const gs = s[s.length - 1];\n\n      if (!gs) {\n        event.message = 'deselect';\n        return event;\n      }\n\n      const selection = gs;\n\n      if (gs.row != null) {\n        event.row = selection.row;\n        const selectedRowValues = [];\n        const selectedRowFormattedValues = [];\n        const dataTable = this.wrapper.getDataTable();\n        const numberOfColumns = dataTable.getNumberOfColumns();\n\n        for (let i = 0; i < numberOfColumns; i++) {\n          selectedRowValues.push(dataTable.getValue(selection.row, i));\n          selectedRowFormattedValues.push(dataTable.getFormattedValue(selection.row, i));\n        }\n\n        event.selectedRowValues = selectedRowValues;\n        event.selectedRowFormattedValues = selectedRowFormattedValues;\n      }\n\n      if (selection.column != null) {\n        event.column = selection.column;\n        event.columnLabel = this.getColumnLabelAtPosition(selection);\n      }\n\n      if (gs.name) {\n        event.columnLabel = gs.name;\n      }\n\n      return event;\n    };\n\n    this.chartSelect = new EventEmitter();\n    this.chartSelectOneTime = new EventEmitter();\n    this.chartReady = new EventEmitter();\n    this.chartReadyOneTime = new EventEmitter();\n    this.chartError = new EventEmitter();\n    this.chartErrorOneTime = new EventEmitter();\n    this.mouseOver = new EventEmitter();\n    this.mouseOverOneTime = new EventEmitter();\n    this.mouseOut = new EventEmitter();\n    this.mouseOutOneTime = new EventEmitter();\n    this.regionClick = new EventEmitter();\n    this.regionClickOneTime = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this.HTMLel = this.el.nativeElement.querySelector('div');\n\n    if (Object.isExtensible(this.data)) {\n      this.data.component = this;\n    }\n\n    this.options = this.data.options;\n    this.init().then(() => {\n      this.draw();\n    });\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.loaderService.load();\n      this.recreateWrapper();\n    });\n  }\n\n  recreateWrapper() {\n    if (this.wrapper === undefined || this.wrapper.getChartType() !== this.data.chartType) {\n      this.dataTable = new GoogleChartsDataTable(this.data);\n      this.dataTable.dataTableChanged.subscribe(dt => {\n        this._draw();\n      }); // see dataTable in https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n\n      let temp = this.data;\n\n      if (this.data.firstRowIsData) {\n        temp = Object.assign(temp, this.data);\n        temp.dataTable = this.dataTable.getDataTable();\n      }\n\n      this.wrapper = new google.visualization.ChartWrapper(temp);\n      this.registerChartWrapperEvents();\n      /* Calling draw even without data is the only way to pass the HTMl element\n         when using the chart in a dashboard. Don't do this in all other cases:\n         it breaks formatters with remote data source, hence the conditional. */\n\n      if (temp.dataTable === undefined && temp.dataSourceUrl === undefined) {\n        try {\n          this.wrapper.draw(this.HTMLel);\n        } catch (err) {}\n      }\n    }\n  }\n\n  _draw() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const dt = this.dataTable.getDataTable();\n\n      if (dt === undefined) {\n        return;\n      }\n\n      this.convertOptions();\n      this.recreateWrapper();\n      this.wrapper.setOptions(this.options);\n      this.wrapper.setDataTable(dt);\n      this.wrapper.draw(this.HTMLel);\n    });\n  }\n\n  getDataTable() {\n    return this.dataTable;\n  }\n\n  draw(value) {\n    if (value === undefined) {\n      value = this.data;\n    }\n\n    this.options = value.options;\n    this.dataTable.init(value);\n  }\n\n  getSelectorBySeriesType(seriesType) {\n    const selectors = {\n      bars: 'bar#%s#%r',\n      haxis: 'hAxis#0#label',\n      line: 'point#%s#%r',\n      legend: 'legendentry#%s',\n      area: 'point#%s#%r'\n    };\n    const selector = selectors[seriesType];\n    return selector;\n  }\n  /**\n   * Given a column number, counts how many\n   * columns have rol==\"data\". Those are mapped\n   * one-to-one to the series array. When rol is not defined\n   * a column of type number means a series column.\n   * @param column to inspect\n   */\n\n\n  getSeriesByColumn(column) {\n    let series = 0;\n    const dataTable = this.wrapper.getDataTable();\n\n    for (let i = column - 1; i >= 0; i--) {\n      const role = dataTable.getColumnRole(i);\n      const type = dataTable.getColumnType(i);\n\n      if (role === 'data' || type === 'number') {\n        series++;\n      }\n    }\n\n    return series;\n  }\n\n  getBoundingBoxForItem(item) {\n    let boundingBox = {\n      top: 0,\n      left: 0,\n      width: 0,\n      height: 0\n    };\n\n    if (this.cli) {\n      const column = item.column;\n      const series = this.getSeriesByColumn(column);\n      const row = item.row;\n      let seriesType = this.options.seriesType;\n\n      if (this.options.series && this.options.series[series] && this.options.series[series].type) {\n        seriesType = this.options.series[series].type;\n      }\n\n      if (seriesType) {\n        let selector = this.getSelectorBySeriesType(seriesType);\n\n        if (selector) {\n          selector = selector.replace('%s', series + '').replace('%c', column + '').replace('%r', row + '');\n          const box = this.cli.getBoundingBox(selector);\n\n          if (box) {\n            boundingBox = box;\n          }\n        }\n      }\n    }\n\n    return boundingBox;\n  }\n\n  getValueAtPosition(position) {\n    if (position.row == null) {\n      return null;\n    }\n\n    const dataTable = this.wrapper.getDataTable();\n    const value = dataTable.getValue(position.row, position.column);\n    return value;\n  }\n\n  getColumnTypeAtPosition(position) {\n    const dataTable = this.wrapper.getDataTable();\n    const type = dataTable.getColumnType(position.column) || '';\n    return type;\n  }\n\n  getColumnLabelAtPosition(position) {\n    const dataTable = this.wrapper.getDataTable();\n    const type = dataTable.getColumnLabel(position.column) || '';\n    return type;\n  }\n\n  getHTMLTooltip() {\n    const tooltipER = new ElementRef(this.el.nativeElement.querySelector('.google-visualization-tooltip'));\n    return new ChartHTMLTooltip(tooltipER);\n  }\n\n  parseMouseEvent(item) {\n    const chartType = this.wrapper.getChartType();\n    let eventColumn = item.column;\n\n    if (eventColumn == null) {\n      switch (chartType) {\n        case 'Timeline':\n          eventColumn = this.wrapper.getDataTable().getNumberOfColumns() === 3 ? 0 : 1;\n          break;\n\n        default:\n          eventColumn = 0;\n      }\n    }\n\n    const eventRow = item.row;\n    const myItem = {\n      row: eventRow,\n      column: eventColumn\n    };\n    const event = {\n      position: item,\n      boundingBox: this.getBoundingBoxForItem(myItem),\n      value: this.getValueAtPosition(myItem),\n      columnType: this.getColumnTypeAtPosition(myItem),\n      columnLabel: this.getColumnLabelAtPosition(myItem)\n    };\n    return event;\n  }\n\n  registerChartEvents() {\n    const chart = this.wrapper.getChart();\n    this.cli = chart.getChartLayoutInterface ? chart.getChartLayoutInterface() : null;\n\n    if (this.mouseOver.observers.length > 0) {\n      google.visualization.events.addListener(chart, 'onmouseover', item => {\n        const event = this.parseMouseEvent(item);\n        event.tooltip = this.getHTMLTooltip();\n        this.mouseOver.emit(event);\n      });\n    }\n\n    if (this.mouseOverOneTime.observers.length > 0) {\n      google.visualization.events.addOneTimeListener(chart, 'onmouseover', item => {\n        const event = this.parseMouseEvent(item);\n        event.tooltip = this.getHTMLTooltip();\n        this.mouseOverOneTime.emit(event);\n      });\n    }\n\n    if (this.mouseOut.observers.length > 0) {\n      google.visualization.events.addListener(chart, 'onmouseout', item => {\n        const event = this.parseMouseEvent(item);\n        this.mouseOut.emit(event);\n      });\n    }\n\n    if (this.mouseOutOneTime.observers.length > 0) {\n      google.visualization.events.addOneTimeListener(chart, 'onmouseout', item => {\n        const event = this.parseMouseEvent(item);\n        this.mouseOutOneTime.emit(event);\n      });\n    }\n\n    if (this.data.chartType === 'GeoChart') {\n      if (this.regionClick.observers.length > 0) {\n        google.visualization.events.addListener(chart, 'regionClick', item => {\n          this.regionClick.emit(item);\n        });\n      }\n\n      if (this.regionClickOneTime.observers.length > 0) {\n        google.visualization.events.addOneTimeListener(chart, 'regionClick', item => {\n          this.regionClick.emit(item);\n        });\n      }\n    }\n  }\n\n  registerChartWrapperEvents() {\n    google.visualization.events.addListener(this.wrapper, 'ready', () => {\n      this.chartReady.emit({\n        message: 'Chart ready'\n      });\n    });\n    google.visualization.events.addOneTimeListener(this.wrapper, 'ready', () => {\n      this.chartReadyOneTime.emit({\n        message: 'Chart ready (one time)'\n      });\n      this.registerChartEvents();\n    });\n    google.visualization.events.addListener(this.wrapper, 'error', error => {\n      this.chartError.emit(error);\n    });\n    google.visualization.events.addOneTimeListener(this.wrapper, 'error', error => {\n      this.chartErrorOneTime.emit(error);\n    });\n    this.addListener(this.wrapper, 'select', this.selectListener, this.chartSelect);\n    this.addOneTimeListener(this.wrapper, 'select', this.selectListener, this.chartSelectOneTime);\n  }\n\n  addListener(source, eventType, listenerFn, evEmitter) {\n    google.visualization.events.addListener(source, eventType, () => {\n      evEmitter.emit(listenerFn());\n    });\n  }\n\n  addOneTimeListener(source, eventType, listenerFn, evEmitter) {\n    google.visualization.events.addOneTimeListener(source, eventType, () => {\n      evEmitter.emit(listenerFn());\n    });\n  }\n\n  convertOptions() {\n    try {\n      this.options = google.charts[this.data.chartType].convertOptions(this.options);\n    } catch (error) {\n      return;\n    }\n  }\n\n}\n\nGoogleChartComponent.ɵfac = function GoogleChartComponent_Factory(t) {\n  return new (t || GoogleChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(GoogleChartsLoaderService));\n};\n\nGoogleChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GoogleChartComponent,\n  selectors: [[\"google-chart\"]],\n  inputs: {\n    data: \"data\"\n  },\n  outputs: {\n    chartReady: \"chartReady\",\n    chartReadyOneTime: \"chartReadyOneTime\",\n    chartError: \"chartError\",\n    chartErrorOneTime: \"chartErrorOneTime\",\n    chartSelect: \"chartSelect\",\n    chartSelectOneTime: \"chartSelectOneTime\",\n    mouseOver: \"mouseOver\",\n    mouseOverOneTime: \"mouseOverOneTime\",\n    mouseOut: \"mouseOut\",\n    mouseOutOneTime: \"mouseOutOneTime\",\n    regionClick: \"regionClick\",\n    regionClickOneTime: \"regionClickOneTime\"\n  },\n  decls: 1,\n  vars: 0,\n  template: function GoogleChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'google-chart',\n      template: '<div></div>'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: GoogleChartsLoaderService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    chartReady: [{\n      type: Output\n    }],\n    chartReadyOneTime: [{\n      type: Output\n    }],\n    chartError: [{\n      type: Output\n    }],\n    chartErrorOneTime: [{\n      type: Output\n    }],\n    chartSelect: [{\n      type: Output\n    }],\n    chartSelectOneTime: [{\n      type: Output\n    }],\n    mouseOver: [{\n      type: Output\n    }],\n    mouseOverOneTime: [{\n      type: Output\n    }],\n    mouseOut: [{\n      type: Output\n    }],\n    mouseOutOneTime: [{\n      type: Output\n    }],\n    regionClick: [{\n      type: Output\n    }],\n    regionClickOneTime: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GoogleChartsDashboardComponent {\n  constructor(el, loaderService) {\n    this.el = el;\n    this.loaderService = loaderService;\n    this.el = el;\n    this.loaderService = loaderService;\n  }\n\n  ngOnInit() {\n    this.data.component = this;\n    this.init().then(() => {\n      if (!this.dataTable) {\n        this.dataTable = new GoogleChartsDataTable(this.data);\n        this.dataTable.dataTableChanged.subscribe(dt => {\n          this._draw();\n        });\n      }\n\n      this.draw();\n    });\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.loaderService.load({\n        packages: ['controls']\n      });\n      this.dashboard = new google.visualization.Dashboard(this.el.nativeElement.querySelector('div'));\n\n      for (const b of this.data.bind) {\n        let controls = b[0];\n        let charts = b[1];\n\n        if (!(controls instanceof Array)) {\n          controls = [controls];\n        }\n\n        if (!(charts instanceof Array)) {\n          charts = [charts];\n        }\n\n        for (const c of controls) {\n          yield c.component.ensureInit();\n        }\n\n        for (const c of charts) {\n          if (!c.component) {\n            continue;\n          }\n\n          yield c.component.init();\n          const data = c.component.data;\n\n          if (data.dataTable !== undefined || data.dataSourceUrl !== undefined) {\n            throw Error('dataTable and dataSourceUrl cannot be specified when ' + 'chart is drawn in a Dashboard');\n          }\n        }\n\n        this.dashboard.bind(controls.map(x => x.component.wrapper), charts.map(x => x.component.wrapper));\n      }\n    });\n  }\n\n  draw(value) {\n    this.dataTable.init(value);\n  }\n\n  _draw() {\n    this.dashboard.draw(this.dataTable.getDataTable());\n  }\n\n}\n\nGoogleChartsDashboardComponent.ɵfac = function GoogleChartsDashboardComponent_Factory(t) {\n  return new (t || GoogleChartsDashboardComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(GoogleChartsLoaderService));\n};\n\nGoogleChartsDashboardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GoogleChartsDashboardComponent,\n  selectors: [[\"google-charts-dashboard\"]],\n  inputs: {\n    data: \"data\"\n  },\n  decls: 1,\n  vars: 0,\n  template: function GoogleChartsDashboardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsDashboardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'google-charts-dashboard',\n      template: '<div></div>'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: GoogleChartsLoaderService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GoogleChartsControlComponent {\n  constructor(el, loaderService) {\n    this.el = el;\n    this.loaderService = loaderService;\n    this.el = el;\n    this.loaderService = loaderService;\n  }\n\n  ngOnInit() {\n    this.data.component = this;\n  }\n\n  ensureInit() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.wrapper) {\n        return;\n      }\n\n      yield this.loaderService.load({\n        packages: ['controls']\n      });\n      let opt;\n      opt = Object.create(this.data);\n      opt.containerId = this.el.nativeElement.querySelector('div');\n      this.wrapper = new google.visualization.ControlWrapper(opt);\n    });\n  }\n\n}\n\nGoogleChartsControlComponent.ɵfac = function GoogleChartsControlComponent_Factory(t) {\n  return new (t || GoogleChartsControlComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(GoogleChartsLoaderService));\n};\n\nGoogleChartsControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GoogleChartsControlComponent,\n  selectors: [[\"google-charts-control\"]],\n  inputs: {\n    data: \"data\"\n  },\n  decls: 1,\n  vars: 0,\n  template: function GoogleChartsControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartsControlComponent, [{\n    type: Component,\n    args: [{\n      selector: 'google-charts-control',\n      template: '<div></div>'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: GoogleChartsLoaderService\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\nclass Ng2GoogleChartsModule {}\n\nNg2GoogleChartsModule.ɵfac = function Ng2GoogleChartsModule_Factory(t) {\n  return new (t || Ng2GoogleChartsModule)();\n};\n\nNg2GoogleChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: Ng2GoogleChartsModule\n});\nNg2GoogleChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [GoogleChartsLoaderService]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Ng2GoogleChartsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GoogleChartComponent, GoogleChartsDashboardComponent, GoogleChartsControlComponent],\n      providers: [GoogleChartsLoaderService],\n      exports: [GoogleChartComponent, GoogleChartsDashboardComponent, GoogleChartsControlComponent]\n    }]\n  }], null, null);\n})();\n\nfunction isComponent(chart) {\n  return chart.wrapper !== undefined;\n}\n\nclass GoogleChartEditor {\n  constructor(loaderService) {\n    this.loaderService = loaderService;\n  }\n\n  createEditor() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.chartEditor !== undefined) {\n        return;\n      }\n\n      yield this.loaderService.load({\n        packages: ['charteditor']\n      });\n      this.chartEditor = new google.visualization.ChartEditor();\n      google.visualization.events.addListener(this.chartEditor, 'ok', () => {\n        const wrapper = this.chartEditor.getChartWrapper();\n        this.comp.wrapper = wrapper;\n        this.comp.data.chartType = wrapper.getChartType();\n\n        if (this.comp.data.options !== undefined || Object.isExtensible(this.comp.data)) {\n          this.comp.data.options = wrapper.getOptions();\n        }\n\n        this.comp.wrapper.draw();\n      });\n    });\n  }\n\n  openDialog(chart, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.createEditor();\n      return new Promise((resolve, reject) => {\n        this.comp = isComponent(chart) ? chart : chart.component;\n        google.visualization.events.addListener(this.chartEditor, 'ok', () => {\n          resolve(this.comp.wrapper);\n        });\n        google.visualization.events.addListener(this.chartEditor, 'cancel', () => {\n          reject();\n        });\n        this.chartEditor.openDialog(this.comp.wrapper, options);\n      });\n    });\n  }\n\n}\n\nGoogleChartEditor.ɵfac = function GoogleChartEditor_Factory(t) {\n  return new (t || GoogleChartEditor)(i0.ɵɵinject(GoogleChartsLoaderService));\n};\n\nGoogleChartEditor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: GoogleChartEditor,\n  factory: GoogleChartEditor.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GoogleChartEditor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: GoogleChartsLoaderService\n    }];\n  }, null);\n})();\n/*\n * Public API Surface of ng2-google-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ChartHTMLTooltip, GoogleChartComponent, GoogleChartEditor, GoogleChartType, GoogleChartsControlComponent, GoogleChartsDashboardComponent, GoogleChartsLoaderService, Ng2GoogleChartsModule };","map":{"version":3,"sources":["/home/machina/Techsavanna/ippf/Ippf/node_modules/ng2-google-charts/fesm2015/ng2-google-charts.js"],"names":["__awaiter","i0","EventEmitter","Directive","Output","LOCALE_ID","Injectable","Inject","Optional","ElementRef","Component","Input","NgModule","GoogleChartsDataTable","constructor","opt","dataTableChanged","_setDataTable","dataTable","firstRowIsData","send","query","undefined","queryResponse","setDataTable","getDataTable","queryCallback","init","tid","window","clearInterval","dataSourceUrl","google","visualization","Query","setQuery","timeout","setTimeout","refreshInterval","setInterval","dt","emit","Array","isArray","arrayToDataTable","reformat","formatters","formatterConfig","formatter","type","fmtOptions","options","PatternFormat","pattern","format","columns","dstColumnIndex","formatterConstructor","formatterOptions","ranges","range","fromBgColor","toBgColor","addGradientRange","from","to","color","addRange","bgcolor","col","ɵfac","ɵdir","ChartHTMLTooltip","el","setPosition","x","y","nativeElement","style","left","PIXELS","top","getDOMElement","GoogleChartsLoaderService","localeId","googleChartsSettings","loadedPackages","loaded","defaultSettings","googleChartsVersion","language","Object","assign","googleScriptLoadingNotifier","googleChartLoadingNotifier","googleScriptIsLoading","googleChartIsLoading","loadGoogleChartsScriptPromise","Promise","resolve","reject","charts","script","document","createElement","src","async","defer","onload","onerror","getElementsByTagName","appendChild","subscribe","load","settings","doLoad","packages","pkgs","filter","p","indexOf","length","_settings","callback","concat","ɵprov","args","providedIn","decorators","GoogleChartType","GoogleChartComponent","loaderService","selectListener","event","message","row","column","selectedRowValues","selectedRowFormattedValues","columnLabel","s","wrapper","getSelection","gs","selection","numberOfColumns","getNumberOfColumns","i","push","getValue","getFormattedValue","getColumnLabelAtPosition","name","chartSelect","chartSelectOneTime","chartReady","chartReadyOneTime","chartError","chartErrorOneTime","mouseOver","mouseOverOneTime","mouseOut","mouseOutOneTime","regionClick","regionClickOneTime","ngOnInit","HTMLel","querySelector","isExtensible","data","component","then","draw","recreateWrapper","getChartType","chartType","_draw","temp","ChartWrapper","registerChartWrapperEvents","err","convertOptions","setOptions","value","getSelectorBySeriesType","seriesType","selectors","bars","haxis","line","legend","area","selector","getSeriesByColumn","series","role","getColumnRole","getColumnType","getBoundingBoxForItem","item","boundingBox","width","height","cli","replace","box","getBoundingBox","getValueAtPosition","position","getColumnTypeAtPosition","getColumnLabel","getHTMLTooltip","tooltipER","parseMouseEvent","eventColumn","eventRow","myItem","columnType","registerChartEvents","chart","getChart","getChartLayoutInterface","observers","events","addListener","tooltip","addOneTimeListener","error","source","eventType","listenerFn","evEmitter","ɵcmp","template","GoogleChartsDashboardComponent","dashboard","Dashboard","b","bind","controls","c","ensureInit","Error","map","GoogleChartsControlComponent","create","containerId","ControlWrapper","Ng2GoogleChartsModule","ɵmod","ɵinj","declarations","providers","exports","isComponent","GoogleChartEditor","createEditor","chartEditor","ChartEditor","getChartWrapper","comp","getOptions","openDialog"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,MAAlC,EAA0CC,SAA1C,EAAqDC,UAArD,EAAiEC,MAAjE,EAAyEC,QAAzE,EAAmFC,UAAnF,EAA+FC,SAA/F,EAA0GC,KAA1G,EAAiHC,QAAjH,QAAiI,eAAjI;;AAEA,MAAMC,qBAAN,CAA4B;AACxBC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,gBAAL,GAAwB,IAAId,YAAJ,EAAxB;;AACA,QAAIa,GAAJ,EAAS;AACL,WAAKE,aAAL,CAAmBF,GAAG,CAACG,SAAvB,EAAkCH,GAAG,CAACI,cAAtC;AACH;AACJ;;AACDC,EAAAA,IAAI,GAAG;AACH,QAAI,KAAKC,KAAL,KAAeC,SAAnB,EAA8B;AAC1B;AACH;;AACD,SAAKD,KAAL,CAAWD,IAAX,CAAiBG,aAAD,IAAmB;AAC/B,WAAKC,YAAL,CAAkBD,aAAa,CAACE,YAAd,EAAlB;;AACA,UAAI,KAAKV,GAAL,CAASW,aAAb,EAA4B;AACxB,aAAKX,GAAL,CAASW,aAAT,CAAuBH,aAAvB;AACH;AACJ,KALD;AAMH;;AACDI,EAAAA,IAAI,CAACZ,GAAD,EAAM;AACN,QAAIA,GAAJ,EAAS;AACL,WAAKA,GAAL,GAAWA,GAAX;AACH;;AACD,QAAI,KAAKa,GAAL,KAAaN,SAAjB,EAA4B;AACxB;AACA;AACAO,MAAAA,MAAM,CAACC,aAAP,CAAqB,KAAKF,GAA1B;AACA,WAAKA,GAAL,GAAWN,SAAX;AACH;;AACD,QAAI,KAAKP,GAAL,CAASgB,aAAb,EAA4B;AACxB,WAAKV,KAAL,GAAa,IAAIW,MAAM,CAACC,aAAP,CAAqBC,KAAzB,CAA+B,KAAKnB,GAAL,CAASgB,aAAxC,CAAb;;AACA,UAAI,KAAKhB,GAAL,CAASM,KAAb,EAAoB;AAChB,aAAKA,KAAL,CAAWc,QAAX,CAAoB,KAAKpB,GAAL,CAASM,KAA7B;AACH;;AACD,UAAI,KAAKN,GAAL,CAASqB,OAAT,KAAqBd,SAAzB,EAAoC;AAChC,aAAKD,KAAL,CAAWgB,UAAX,CAAsB,KAAKtB,GAAL,CAASqB,OAA/B;AACH;;AACD,UAAI,KAAKrB,GAAL,CAASuB,eAAb,EAA8B;AAC1B;AACA,aAAKV,GAAL,GAAWC,MAAM,CAACU,WAAP,CAAmB,MAAM;AAChC,eAAKnB,IAAL;AACH,SAFU,EAER,KAAKL,GAAL,CAASuB,eAAT,GAA2B,IAFnB,CAAX;AAGH;;AACD,WAAKlB,IAAL;AACH,KAfD,MAgBK;AACD,WAAKI,YAAL,CAAkB,KAAKT,GAAL,CAASG,SAA3B;AACH;AACJ;AACD;AACJ;AACA;;;AACIO,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKP,SAAZ;AACH;;AACDM,EAAAA,YAAY,CAACgB,EAAD,EAAKrB,cAAL,EAAqB;AAC7B,QAAIA,cAAc,KAAKG,SAAvB,EAAkC;AAC9BH,MAAAA,cAAc,GAAG,KAAKJ,GAAL,CAASI,cAA1B;AACH;;AACD,SAAKF,aAAL,CAAmBuB,EAAnB,EAAuBrB,cAAvB;;AACA,SAAKH,gBAAL,CAAsByB,IAAtB,CAA2B,KAAKvB,SAAhC;AACH;;AACDD,EAAAA,aAAa,CAACuB,EAAD,EAAKrB,cAAL,EAAqB;AAC9B,QAAIuB,KAAK,CAACC,OAAN,CAAcH,EAAd,CAAJ,EAAuB;AACnBA,MAAAA,EAAE,GAAGR,MAAM,CAACC,aAAP,CAAqBW,gBAArB,CAAsCJ,EAAtC,EAA0CrB,cAA1C,CAAL;AACH;;AACD,SAAKD,SAAL,GAAiBsB,EAAjB;AACA,SAAKK,QAAL;AACH;AACD;AACJ;AACA;;;AACIA,EAAAA,QAAQ,GAAG;AACP,UAAML,EAAE,GAAG,KAAKtB,SAAhB;;AACA,QAAIsB,EAAE,KAAKlB,SAAX,EAAsB;AAClB;AACH;;AACD,QAAI,KAAKP,GAAL,CAAS+B,UAAT,KAAwBxB,SAA5B,EAAuC;AACnC;AACH;;AACD,SAAK,MAAMyB,eAAX,IAA8B,KAAKhC,GAAL,CAAS+B,UAAvC,EAAmD;AAC/C,UAAIE,SAAJ;;AACA,UAAID,eAAe,CAACE,IAAhB,KAAyB,eAA7B,EAA8C;AAC1C,cAAMC,UAAU,GAAGH,eAAe,CAACI,OAAnC;AACAH,QAAAA,SAAS,GAAG,IAAIhB,MAAM,CAACC,aAAP,CAAqBmB,aAAzB,CAAuCF,UAAU,CAACG,OAAlD,CAAZ;AACAL,QAAAA,SAAS,CAACM,MAAV,CAAiBd,EAAjB,EAAqBO,eAAe,CAACQ,OAArC,EAA8CL,UAAU,CAACM,cAAzD;AACA;AACH;;AACD,YAAMC,oBAAoB,GAAGzB,MAAM,CAACC,aAAP,CAAqBc,eAAe,CAACE,IAArC,CAA7B;AACA,YAAMS,gBAAgB,GAAGX,eAAe,CAACI,OAAzC;AACAH,MAAAA,SAAS,GAAG,IAAIS,oBAAJ,CAAyBC,gBAAzB,CAAZ;;AACA,UAAIX,eAAe,CAACE,IAAhB,KAAyB,aAAzB,IAA0CS,gBAA9C,EAAgE;AAC5D,cAAMR,UAAU,GAAGQ,gBAAnB;;AACA,YAAIR,UAAU,CAACS,MAAf,EAAuB;AACnB,eAAK,MAAMC,KAAX,IAAoBV,UAAU,CAACS,MAA/B,EAAuC;AACnC,gBAAI,OAAQC,KAAK,CAACC,WAAd,KAA+B,WAA/B,IACG,OAAQD,KAAK,CAACE,SAAd,KAA6B,WADpC,EACiD;AAC7Cd,cAAAA,SAAS,CAACe,gBAAV,CAA2BH,KAAK,CAACI,IAAjC,EAAuCJ,KAAK,CAACK,EAA7C,EAAiDL,KAAK,CAACM,KAAvD,EAA8DN,KAAK,CAACC,WAApE,EAAiFD,KAAK,CAACE,SAAvF;AACH,aAHD,MAIK;AACDd,cAAAA,SAAS,CAACmB,QAAV,CAAmBP,KAAK,CAACI,IAAzB,EAA+BJ,KAAK,CAACK,EAArC,EAAyCL,KAAK,CAACM,KAA/C,EAAsDN,KAAK,CAACQ,OAA5D;AACH;AACJ;AACJ;AACJ;;AACD,WAAK,MAAMC,GAAX,IAAkBtB,eAAe,CAACQ,OAAlC,EAA2C;AACvCP,QAAAA,SAAS,CAACM,MAAV,CAAiBd,EAAjB,EAAqB6B,GAArB;AACH;AACJ;AACJ;;AA7GuB;;AA+G5BxD,qBAAqB,CAACyD,IAAtB;AAAyGrE,EAAAA,EAAzG;AAAA;;AACAY,qBAAqB,CAAC0D,IAAtB,kBADyGtE,EACzG;AAAA,QAAuGY,qBAAvG;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDAFyGZ,EAEzG,mBAA4FY,qBAA5F,EAA+H,CAAC;AACpHoC,IAAAA,IAAI,EAAE9C;AAD8G,GAAD,CAA/H,EAE4B,YAAY;AAAE,WAAO,CAAC;AAAE8C,MAAAA,IAAI,EAAE3B;AAAR,KAAD,CAAP;AAA+B,GAFzE,EAE2F;AAAEN,IAAAA,gBAAgB,EAAE,CAAC;AAChGiC,MAAAA,IAAI,EAAE7C;AAD0F,KAAD;AAApB,GAF3F;AAAA;;AAMA,MAAMoE,gBAAN,CAAuB;AACnB1D,EAAAA,WAAW,CAAC2D,EAAD,EAAK;AACZ,SAAKA,EAAL,GAAUA,EAAV;AACH;;AACDC,EAAAA,WAAW,CAACC,CAAD,EAAIC,CAAJ,EAAO;AACd,SAAKH,EAAL,CAAQI,aAAR,CAAsBC,KAAtB,CAA4BC,IAA5B,GAAmCJ,CAAC,GAAGH,gBAAgB,CAACQ,MAAxD;AACA,SAAKP,EAAL,CAAQI,aAAR,CAAsBC,KAAtB,CAA4BG,GAA5B,GAAkCL,CAAC,GAAGJ,gBAAgB,CAACQ,MAAvD;AACH;;AACDE,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKT,EAAZ;AACH;;AAVkB;;AAYvBD,gBAAgB,CAACQ,MAAjB,GAA0B,IAA1B;;AAEA,MAAMG,yBAAN,CAAgC;AAC5BrE,EAAAA,WAAW,CAACsE,QAAD,EAAWC,oBAAX,EAAiC;AACxC,SAAKA,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,MAAL,GAAc,KAAd;AACA,UAAMC,eAAe,GAAG;AACpBC,MAAAA,mBAAmB,EAAE,IADD;AAEpBC,MAAAA,QAAQ,EAAEN;AAFU,KAAxB;AAIA,SAAKC,oBAAL,GAA4BM,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,eAAlB,CAAd,EAAkD,KAAKH,oBAAvD,CAA5B;AACA,SAAKQ,2BAAL,GAAmC,IAAI3F,YAAJ,EAAnC;AACA,SAAK4F,0BAAL,GAAkC,IAAI5F,YAAJ,EAAlC;AACA,SAAK6F,qBAAL,GAA6B,KAA7B;AACA,SAAKC,oBAAL,GAA4B,KAA5B;AACA,SAAKC,6BAAL,GAAqC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAClE,UAAI,OAAOpE,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACqE,MAA5C,EAAoD;AAChDF,QAAAA,OAAO;AACV,OAFD,MAGK,IAAI,CAAC,KAAKJ,qBAAV,EAAiC;AAClC,aAAKA,qBAAL,GAA6B,IAA7B;AACA,cAAMO,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,QAAAA,MAAM,CAACrD,IAAP,GAAc,iBAAd;AACAqD,QAAAA,MAAM,CAACG,GAAP,GAAa,0CAAb;AACAH,QAAAA,MAAM,CAACI,KAAP,GAAe,IAAf;AACAJ,QAAAA,MAAM,CAACK,KAAP,GAAe,IAAf;;AACAL,QAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AAClB,eAAKb,qBAAL,GAA6B,KAA7B;AACA,eAAKF,2BAAL,CAAiCpD,IAAjC,CAAsC,IAAtC;AACA0D,UAAAA,OAAO;AACV,SAJD;;AAKAG,QAAAA,MAAM,CAACO,OAAP,GAAiB,MAAM;AACnB,eAAKd,qBAAL,GAA6B,KAA7B;AACA,eAAKF,2BAAL,CAAiCpD,IAAjC,CAAsC,KAAtC;AACA2D,UAAAA,MAAM;AACT,SAJD;;AAKAG,QAAAA,QAAQ,CAACO,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,EAAyCC,WAAzC,CAAqDT,MAArD;AACH,OAlBI,MAmBA;AACD,aAAKT,2BAAL,CAAiCmB,SAAjC,CAA4CzB,MAAD,IAAY;AACnD,cAAIA,MAAJ,EAAY;AACRY,YAAAA,OAAO;AACV,WAFD,MAGK;AACDC,YAAAA,MAAM;AACT;AACJ,SAPD;AAQH;AACJ,KAjCoC,CAArC;AAkCH;;AACDa,EAAAA,IAAI,CAACC,QAAD,EAAW;AACX,WAAOlH,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,YAAM,KAAKiG,6BAAX;AACA,YAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC3B,YAAI,KAAKH,oBAAT,EAA+B;AAC3B,eAAKF,0BAAL,CAAgCkB,SAAhC,CAA0C,MAAM;AAC5C,iBAAKG,MAAL,CAAYhB,OAAZ,EAAqBe,QAArB;AACH,WAFD;AAGA;AACH;;AACD,aAAKC,MAAL,CAAYhB,OAAZ,EAAqBe,QAArB;AACH,OARK,CAAN;AASH,KAXe,CAAhB;AAYH;;AACDC,EAAAA,MAAM,CAAChB,OAAD,EAAUe,QAAV,EAAoB;AACtBA,IAAAA,QAAQ,GAAGvB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKP,oBAAvB,CAAd,EAA4D6B,QAA5D,CAAX;;AACA,QAAI,CAACA,QAAQ,CAACE,QAAV,IAAsB,KAAK7B,MAA/B,EAAuC;AACnCY,MAAAA,OAAO;AACP;AACH;;AACD,QAAIe,QAAQ,CAACE,QAAb,EAAuB;AACnB,UAAIC,IAAI,GAAGH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyBC,CAAC,IAAI,KAAKjC,cAAL,CAAoBkC,OAApB,CAA4BD,CAA5B,IAAiC,CAA/D,CAAX;;AACA,UAAIF,IAAI,CAACI,MAAL,IAAe,CAAf,IAAoB,KAAKlC,MAA7B,EAAqC;AACjCY,QAAAA,OAAO;AACP;AACH;;AACDe,MAAAA,QAAQ,CAACE,QAAT,GAAoBC,IAApB;AACH;;AACD,UAAMK,SAAS,GAAGR,QAAlB;;AACAQ,IAAAA,SAAS,CAACC,QAAV,GAAqB,MAAM;AACvB,WAAK3B,oBAAL,GAA4B,KAA5B;;AACA,UAAI0B,SAAS,CAACN,QAAV,KAAuB9F,SAA3B,EAAsC;AAClC,aAAKgE,cAAL,GAAsB,KAAKA,cAAL,CAAoBsC,MAApB,CAA2BF,SAAS,CAACN,QAArC,CAAtB;AACH;;AACD,WAAK7B,MAAL,GAAc,IAAd;AACA,WAAKO,0BAAL,CAAgCrD,IAAhC;AACA0D,MAAAA,OAAO;AACV,KARD;;AASA,SAAKH,oBAAL,GAA4B,IAA5B;AACAhE,IAAAA,MAAM,CAACqE,MAAP,CAAcY,IAAd,CAAmBC,QAAQ,CAACzB,mBAA5B,EAAiDiC,SAAjD;AACH;;AAzF2B;;AA2FhCvC,yBAAyB,CAACb,IAA1B;AAAA,mBAAuHa,yBAAvH,EAjHyGlF,EAiHzG,UAAkKI,SAAlK,GAjHyGJ,EAiHzG,UAAwL,sBAAxL;AAAA;;AACAkF,yBAAyB,CAAC0C,KAA1B,kBAlHyG5H,EAkHzG;AAAA,SAA2HkF,yBAA3H;AAAA,WAA2HA,yBAA3H;AAAA,cAAkK;AAAlK;;AACA;AAAA,qDAnHyGlF,EAmHzG,mBAA4FkF,yBAA5F,EAAmI,CAAC;AACxHlC,IAAAA,IAAI,EAAE3C,UADkH;AAExHwH,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,UAAU,EAAE;AADb,KAAD;AAFkH,GAAD,CAAnI,EAK4B,YAAY;AAAE,WAAO,CAAC;AAAE9E,MAAAA,IAAI,EAAE3B,SAAR;AAAmB0G,MAAAA,UAAU,EAAE,CAAC;AAC9D/E,QAAAA,IAAI,EAAE1C,MADwD;AAE9DuH,QAAAA,IAAI,EAAE,CAACzH,SAAD;AAFwD,OAAD;AAA/B,KAAD,EAG3B;AAAE4C,MAAAA,IAAI,EAAE3B,SAAR;AAAmB0G,MAAAA,UAAU,EAAE,CAAC;AAClC/E,QAAAA,IAAI,EAAE1C,MAD4B;AAElCuH,QAAAA,IAAI,EAAE,CAAC,sBAAD;AAF4B,OAAD,EAGlC;AACC7E,QAAAA,IAAI,EAAEzC;AADP,OAHkC;AAA/B,KAH2B,CAAP;AAQlB,GAbxB;AAAA;;AAeA,IAAIyH,eAAJ;;AACA,CAAC,UAAUA,eAAV,EAA2B;AACxBA,EAAAA,eAAe,CAAC,iBAAD,CAAf,GAAqC,iBAArC;AACAA,EAAAA,eAAe,CAAC,WAAD,CAAf,GAA+B,WAA/B;AACAA,EAAAA,eAAe,CAAC,UAAD,CAAf,GAA8B,UAA9B;AACAA,EAAAA,eAAe,CAAC,aAAD,CAAf,GAAiC,aAAjC;AACAA,EAAAA,eAAe,CAAC,UAAD,CAAf,GAA8B,UAA9B;AACAA,EAAAA,eAAe,CAAC,kBAAD,CAAf,GAAsC,kBAAtC;AACAA,EAAAA,eAAe,CAAC,aAAD,CAAf,GAAiC,aAAjC;AACAA,EAAAA,eAAe,CAAC,YAAD,CAAf,GAAgC,YAAhC;AACAA,EAAAA,eAAe,CAAC,OAAD,CAAf,GAA2B,OAA3B;AACAA,EAAAA,eAAe,CAAC,OAAD,CAAf,GAA2B,OAA3B;AACAA,EAAAA,eAAe,CAAC,UAAD,CAAf,GAA8B,UAA9B;AACAA,EAAAA,eAAe,CAAC,WAAD,CAAf,GAA+B,WAA/B;AACAA,EAAAA,eAAe,CAAC,WAAD,CAAf,GAA+B,WAA/B;AACAA,EAAAA,eAAe,CAAC,KAAD,CAAf,GAAyB,KAAzB;AACAA,EAAAA,eAAe,CAAC,UAAD,CAAf,GAA8B,UAA9B;AACAA,EAAAA,eAAe,CAAC,UAAD,CAAf,GAA8B,UAA9B;AACAA,EAAAA,eAAe,CAAC,QAAD,CAAf,GAA4B,QAA5B;AACAA,EAAAA,eAAe,CAAC,cAAD,CAAf,GAAkC,cAAlC;AACAA,EAAAA,eAAe,CAAC,kBAAD,CAAf,GAAsC,kBAAtC;AACAA,EAAAA,eAAe,CAAC,OAAD,CAAf,GAA2B,OAA3B;AACAA,EAAAA,eAAe,CAAC,UAAD,CAAf,GAA8B,UAA9B;AACAA,EAAAA,eAAe,CAAC,SAAD,CAAf,GAA6B,SAA7B;AACAA,EAAAA,eAAe,CAAC,WAAD,CAAf,GAA+B,WAA/B;AACAA,EAAAA,eAAe,CAAC,UAAD,CAAf,GAA8B,UAA9B;AACH,CAzBD,EAyBGA,eAAe,KAAKA,eAAe,GAAG,EAAvB,CAzBlB;;AA0BA,MAAMC,oBAAN,CAA2B;AACvBpH,EAAAA,WAAW,CAAC2D,EAAD,EAAK0D,aAAL,EAAoB;AAC3B,SAAK1D,EAAL,GAAUA,EAAV;AACA,SAAK0D,aAAL,GAAqBA,aAArB;;AACA,SAAKC,cAAL,GAAsB,MAAM;AACxB,YAAMC,KAAK,GAAG;AACVC,QAAAA,OAAO,EAAE,QADC;AAEVC,QAAAA,GAAG,EAAE,IAFK;AAGVC,QAAAA,MAAM,EAAE,IAHE;AAIVC,QAAAA,iBAAiB,EAAE,EAJT;AAKVC,QAAAA,0BAA0B,EAAE,EALlB;AAMVC,QAAAA,WAAW,EAAE;AANH,OAAd;AAQA,YAAMC,CAAC,GAAG,KAAKC,OAAL,CAAa5G,aAAb,CAA2B6G,YAA3B,EAAV;AACA,YAAMC,EAAE,GAAGH,CAAC,CAACA,CAAC,CAACnB,MAAF,GAAW,CAAZ,CAAZ;;AACA,UAAI,CAACsB,EAAL,EAAS;AACLV,QAAAA,KAAK,CAACC,OAAN,GAAgB,UAAhB;AACA,eAAOD,KAAP;AACH;;AACD,YAAMW,SAAS,GAAGD,EAAlB;;AACA,UAAIA,EAAE,CAACR,GAAH,IAAU,IAAd,EAAoB;AAChBF,QAAAA,KAAK,CAACE,GAAN,GAAYS,SAAS,CAACT,GAAtB;AACA,cAAME,iBAAiB,GAAG,EAA1B;AACA,cAAMC,0BAA0B,GAAG,EAAnC;AACA,cAAMxH,SAAS,GAAG,KAAK2H,OAAL,CAAapH,YAAb,EAAlB;AACA,cAAMwH,eAAe,GAAG/H,SAAS,CAACgI,kBAAV,EAAxB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,eAApB,EAAqCE,CAAC,EAAtC,EAA0C;AACtCV,UAAAA,iBAAiB,CAACW,IAAlB,CAAuBlI,SAAS,CAACmI,QAAV,CAAmBL,SAAS,CAACT,GAA7B,EAAkCY,CAAlC,CAAvB;AACAT,UAAAA,0BAA0B,CAACU,IAA3B,CAAgClI,SAAS,CAACoI,iBAAV,CAA4BN,SAAS,CAACT,GAAtC,EAA2CY,CAA3C,CAAhC;AACH;;AACDd,QAAAA,KAAK,CAACI,iBAAN,GAA0BA,iBAA1B;AACAJ,QAAAA,KAAK,CAACK,0BAAN,GAAmCA,0BAAnC;AACH;;AACD,UAAIM,SAAS,CAACR,MAAV,IAAoB,IAAxB,EAA8B;AAC1BH,QAAAA,KAAK,CAACG,MAAN,GAAeQ,SAAS,CAACR,MAAzB;AACAH,QAAAA,KAAK,CAACM,WAAN,GAAoB,KAAKY,wBAAL,CAA8BP,SAA9B,CAApB;AACH;;AACD,UAAID,EAAE,CAACS,IAAP,EAAa;AACTnB,QAAAA,KAAK,CAACM,WAAN,GAAoBI,EAAE,CAACS,IAAvB;AACH;;AACD,aAAOnB,KAAP;AACH,KArCD;;AAsCA,SAAKoB,WAAL,GAAmB,IAAIvJ,YAAJ,EAAnB;AACA,SAAKwJ,kBAAL,GAA0B,IAAIxJ,YAAJ,EAA1B;AACA,SAAKyJ,UAAL,GAAkB,IAAIzJ,YAAJ,EAAlB;AACA,SAAK0J,iBAAL,GAAyB,IAAI1J,YAAJ,EAAzB;AACA,SAAK2J,UAAL,GAAkB,IAAI3J,YAAJ,EAAlB;AACA,SAAK4J,iBAAL,GAAyB,IAAI5J,YAAJ,EAAzB;AACA,SAAK6J,SAAL,GAAiB,IAAI7J,YAAJ,EAAjB;AACA,SAAK8J,gBAAL,GAAwB,IAAI9J,YAAJ,EAAxB;AACA,SAAK+J,QAAL,GAAgB,IAAI/J,YAAJ,EAAhB;AACA,SAAKgK,eAAL,GAAuB,IAAIhK,YAAJ,EAAvB;AACA,SAAKiK,WAAL,GAAmB,IAAIjK,YAAJ,EAAnB;AACA,SAAKkK,kBAAL,GAA0B,IAAIlK,YAAJ,EAA1B;AACH;;AACDmK,EAAAA,QAAQ,GAAG;AACP,SAAKC,MAAL,GAAc,KAAK7F,EAAL,CAAQI,aAAR,CAAsB0F,aAAtB,CAAoC,KAApC,CAAd;;AACA,QAAI5E,MAAM,CAAC6E,YAAP,CAAoB,KAAKC,IAAzB,CAAJ,EAAoC;AAChC,WAAKA,IAAL,CAAUC,SAAV,GAAsB,IAAtB;AACH;;AACD,SAAKvH,OAAL,GAAe,KAAKsH,IAAL,CAAUtH,OAAzB;AACA,SAAKxB,IAAL,GAAYgJ,IAAZ,CAAiB,MAAM;AACnB,WAAKC,IAAL;AACH,KAFD;AAGH;;AACDjJ,EAAAA,IAAI,GAAG;AACH,WAAO3B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,YAAM,KAAKmI,aAAL,CAAmBlB,IAAnB,EAAN;AACA,WAAK4D,eAAL;AACH,KAHe,CAAhB;AAIH;;AACDA,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKhC,OAAL,KAAiBvH,SAAjB,IAA8B,KAAKuH,OAAL,CAAaiC,YAAb,OAAgC,KAAKL,IAAL,CAAUM,SAA5E,EAAuF;AACnF,WAAK7J,SAAL,GAAiB,IAAIL,qBAAJ,CAA0B,KAAK4J,IAA/B,CAAjB;AACA,WAAKvJ,SAAL,CAAeF,gBAAf,CAAgCgG,SAAhC,CAA2CxE,EAAD,IAAQ;AAC9C,aAAKwI,KAAL;AACH,OAFD,EAFmF,CAKnF;;AACA,UAAIC,IAAI,GAAG,KAAKR,IAAhB;;AACA,UAAI,KAAKA,IAAL,CAAUtJ,cAAd,EAA8B;AAC1B8J,QAAAA,IAAI,GAAGtF,MAAM,CAACC,MAAP,CAAcqF,IAAd,EAAoB,KAAKR,IAAzB,CAAP;AACAQ,QAAAA,IAAI,CAAC/J,SAAL,GAAiB,KAAKA,SAAL,CAAeO,YAAf,EAAjB;AACH;;AACD,WAAKoH,OAAL,GAAe,IAAI7G,MAAM,CAACC,aAAP,CAAqBiJ,YAAzB,CAAsCD,IAAtC,CAAf;AACA,WAAKE,0BAAL;AACA;AACZ;AACA;;AACY,UAAIF,IAAI,CAAC/J,SAAL,KAAmBI,SAAnB,IAAgC2J,IAAI,CAAClJ,aAAL,KAAuBT,SAA3D,EAAsE;AAClE,YAAI;AACA,eAAKuH,OAAL,CAAa+B,IAAb,CAAkB,KAAKN,MAAvB;AACH,SAFD,CAGA,OAAOc,GAAP,EAAY,CAAG;AAClB;AACJ;AACJ;;AACDJ,EAAAA,KAAK,GAAG;AACJ,WAAOhL,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,YAAMwC,EAAE,GAAG,KAAKtB,SAAL,CAAeO,YAAf,EAAX;;AACA,UAAIe,EAAE,KAAKlB,SAAX,EAAsB;AAClB;AACH;;AACD,WAAK+J,cAAL;AACA,WAAKR,eAAL;AACA,WAAKhC,OAAL,CAAayC,UAAb,CAAwB,KAAKnI,OAA7B;AACA,WAAK0F,OAAL,CAAarH,YAAb,CAA0BgB,EAA1B;AACA,WAAKqG,OAAL,CAAa+B,IAAb,CAAkB,KAAKN,MAAvB;AACH,KAVe,CAAhB;AAWH;;AACD7I,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKP,SAAZ;AACH;;AACD0J,EAAAA,IAAI,CAACW,KAAD,EAAQ;AACR,QAAIA,KAAK,KAAKjK,SAAd,EAAyB;AACrBiK,MAAAA,KAAK,GAAG,KAAKd,IAAb;AACH;;AACD,SAAKtH,OAAL,GAAeoI,KAAK,CAACpI,OAArB;AACA,SAAKjC,SAAL,CAAeS,IAAf,CAAoB4J,KAApB;AACH;;AACDC,EAAAA,uBAAuB,CAACC,UAAD,EAAa;AAChC,UAAMC,SAAS,GAAG;AACdC,MAAAA,IAAI,EAAE,WADQ;AAEdC,MAAAA,KAAK,EAAE,eAFO;AAGdC,MAAAA,IAAI,EAAE,aAHQ;AAIdC,MAAAA,MAAM,EAAE,gBAJM;AAKdC,MAAAA,IAAI,EAAE;AALQ,KAAlB;AAOA,UAAMC,QAAQ,GAAGN,SAAS,CAACD,UAAD,CAA1B;AACA,WAAOO,QAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,iBAAiB,CAACzD,MAAD,EAAS;AACtB,QAAI0D,MAAM,GAAG,CAAb;AACA,UAAMhL,SAAS,GAAG,KAAK2H,OAAL,CAAapH,YAAb,EAAlB;;AACA,SAAK,IAAI0H,CAAC,GAAGX,MAAM,GAAG,CAAtB,EAAyBW,CAAC,IAAI,CAA9B,EAAiCA,CAAC,EAAlC,EAAsC;AAClC,YAAMgD,IAAI,GAAGjL,SAAS,CAACkL,aAAV,CAAwBjD,CAAxB,CAAb;AACA,YAAMlG,IAAI,GAAG/B,SAAS,CAACmL,aAAV,CAAwBlD,CAAxB,CAAb;;AACA,UAAIgD,IAAI,KAAK,MAAT,IAAmBlJ,IAAI,KAAK,QAAhC,EAA0C;AACtCiJ,QAAAA,MAAM;AACT;AACJ;;AACD,WAAOA,MAAP;AACH;;AACDI,EAAAA,qBAAqB,CAACC,IAAD,EAAO;AACxB,QAAIC,WAAW,GAAG;AAAEvH,MAAAA,GAAG,EAAE,CAAP;AAAUF,MAAAA,IAAI,EAAE,CAAhB;AAAmB0H,MAAAA,KAAK,EAAE,CAA1B;AAA6BC,MAAAA,MAAM,EAAE;AAArC,KAAlB;;AACA,QAAI,KAAKC,GAAT,EAAc;AACV,YAAMnE,MAAM,GAAG+D,IAAI,CAAC/D,MAApB;AACA,YAAM0D,MAAM,GAAG,KAAKD,iBAAL,CAAuBzD,MAAvB,CAAf;AACA,YAAMD,GAAG,GAAGgE,IAAI,CAAChE,GAAjB;AACA,UAAIkD,UAAU,GAAG,KAAKtI,OAAL,CAAasI,UAA9B;;AACA,UAAI,KAAKtI,OAAL,CAAa+I,MAAb,IAAuB,KAAK/I,OAAL,CAAa+I,MAAb,CAAoBA,MAApB,CAAvB,IAAsD,KAAK/I,OAAL,CAAa+I,MAAb,CAAoBA,MAApB,EAA4BjJ,IAAtF,EAA4F;AACxFwI,QAAAA,UAAU,GAAG,KAAKtI,OAAL,CAAa+I,MAAb,CAAoBA,MAApB,EAA4BjJ,IAAzC;AACH;;AACD,UAAIwI,UAAJ,EAAgB;AACZ,YAAIO,QAAQ,GAAG,KAAKR,uBAAL,CAA6BC,UAA7B,CAAf;;AACA,YAAIO,QAAJ,EAAc;AACVA,UAAAA,QAAQ,GAAGA,QAAQ,CAACY,OAAT,CAAiB,IAAjB,EAAuBV,MAAM,GAAG,EAAhC,EAAoCU,OAApC,CAA4C,IAA5C,EAAkDpE,MAAM,GAAG,EAA3D,EAA+DoE,OAA/D,CAAuE,IAAvE,EAA6ErE,GAAG,GAAG,EAAnF,CAAX;AACA,gBAAMsE,GAAG,GAAG,KAAKF,GAAL,CAASG,cAAT,CAAwBd,QAAxB,CAAZ;;AACA,cAAIa,GAAJ,EAAS;AACLL,YAAAA,WAAW,GAAGK,GAAd;AACH;AACJ;AACJ;AACJ;;AACD,WAAOL,WAAP;AACH;;AACDO,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AACzB,QAAIA,QAAQ,CAACzE,GAAT,IAAgB,IAApB,EAA0B;AACtB,aAAO,IAAP;AACH;;AACD,UAAMrH,SAAS,GAAG,KAAK2H,OAAL,CAAapH,YAAb,EAAlB;AACA,UAAM8J,KAAK,GAAGrK,SAAS,CAACmI,QAAV,CAAmB2D,QAAQ,CAACzE,GAA5B,EAAiCyE,QAAQ,CAACxE,MAA1C,CAAd;AACA,WAAO+C,KAAP;AACH;;AACD0B,EAAAA,uBAAuB,CAACD,QAAD,EAAW;AAC9B,UAAM9L,SAAS,GAAG,KAAK2H,OAAL,CAAapH,YAAb,EAAlB;AACA,UAAMwB,IAAI,GAAG/B,SAAS,CAACmL,aAAV,CAAwBW,QAAQ,CAACxE,MAAjC,KAA4C,EAAzD;AACA,WAAOvF,IAAP;AACH;;AACDsG,EAAAA,wBAAwB,CAACyD,QAAD,EAAW;AAC/B,UAAM9L,SAAS,GAAG,KAAK2H,OAAL,CAAapH,YAAb,EAAlB;AACA,UAAMwB,IAAI,GAAG/B,SAAS,CAACgM,cAAV,CAAyBF,QAAQ,CAACxE,MAAlC,KAA6C,EAA1D;AACA,WAAOvF,IAAP;AACH;;AACDkK,EAAAA,cAAc,GAAG;AACb,UAAMC,SAAS,GAAG,IAAI3M,UAAJ,CAAe,KAAKgE,EAAL,CAAQI,aAAR,CAAsB0F,aAAtB,CAAoC,+BAApC,CAAf,CAAlB;AACA,WAAO,IAAI/F,gBAAJ,CAAqB4I,SAArB,CAAP;AACH;;AACDC,EAAAA,eAAe,CAACd,IAAD,EAAO;AAClB,UAAMxB,SAAS,GAAG,KAAKlC,OAAL,CAAaiC,YAAb,EAAlB;AACA,QAAIwC,WAAW,GAAGf,IAAI,CAAC/D,MAAvB;;AACA,QAAI8E,WAAW,IAAI,IAAnB,EAAyB;AACrB,cAAQvC,SAAR;AACI,aAAK,UAAL;AACIuC,UAAAA,WAAW,GAAG,KAAKzE,OAAL,CAAapH,YAAb,GAA4ByH,kBAA5B,OAAqD,CAArD,GAAyD,CAAzD,GAA6D,CAA3E;AACA;;AACJ;AACIoE,UAAAA,WAAW,GAAG,CAAd;AALR;AAOH;;AACD,UAAMC,QAAQ,GAAGhB,IAAI,CAAChE,GAAtB;AACA,UAAMiF,MAAM,GAAG;AACXjF,MAAAA,GAAG,EAAEgF,QADM;AAEX/E,MAAAA,MAAM,EAAE8E;AAFG,KAAf;AAIA,UAAMjF,KAAK,GAAG;AACV2E,MAAAA,QAAQ,EAAET,IADA;AAEVC,MAAAA,WAAW,EAAE,KAAKF,qBAAL,CAA2BkB,MAA3B,CAFH;AAGVjC,MAAAA,KAAK,EAAE,KAAKwB,kBAAL,CAAwBS,MAAxB,CAHG;AAIVC,MAAAA,UAAU,EAAE,KAAKR,uBAAL,CAA6BO,MAA7B,CAJF;AAKV7E,MAAAA,WAAW,EAAE,KAAKY,wBAAL,CAA8BiE,MAA9B;AALH,KAAd;AAOA,WAAOnF,KAAP;AACH;;AACDqF,EAAAA,mBAAmB,GAAG;AAClB,UAAMC,KAAK,GAAG,KAAK9E,OAAL,CAAa+E,QAAb,EAAd;AACA,SAAKjB,GAAL,GAAWgB,KAAK,CAACE,uBAAN,GAAgCF,KAAK,CAACE,uBAAN,EAAhC,GAAkE,IAA7E;;AACA,QAAI,KAAK9D,SAAL,CAAe+D,SAAf,CAAyBrG,MAAzB,GAAkC,CAAtC,EAAyC;AACrCzF,MAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BC,WAA5B,CAAwCL,KAAxC,EAA+C,aAA/C,EAA+DpB,IAAD,IAAU;AACpE,cAAMlE,KAAK,GAAG,KAAKgF,eAAL,CAAqBd,IAArB,CAAd;AACAlE,QAAAA,KAAK,CAAC4F,OAAN,GAAgB,KAAKd,cAAL,EAAhB;AACA,aAAKpD,SAAL,CAAetH,IAAf,CAAoB4F,KAApB;AACH,OAJD;AAKH;;AACD,QAAI,KAAK2B,gBAAL,CAAsB8D,SAAtB,CAAgCrG,MAAhC,GAAyC,CAA7C,EAAgD;AAC5CzF,MAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BG,kBAA5B,CAA+CP,KAA/C,EAAsD,aAAtD,EAAsEpB,IAAD,IAAU;AAC3E,cAAMlE,KAAK,GAAG,KAAKgF,eAAL,CAAqBd,IAArB,CAAd;AACAlE,QAAAA,KAAK,CAAC4F,OAAN,GAAgB,KAAKd,cAAL,EAAhB;AACA,aAAKnD,gBAAL,CAAsBvH,IAAtB,CAA2B4F,KAA3B;AACH,OAJD;AAKH;;AACD,QAAI,KAAK4B,QAAL,CAAc6D,SAAd,CAAwBrG,MAAxB,GAAiC,CAArC,EAAwC;AACpCzF,MAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BC,WAA5B,CAAwCL,KAAxC,EAA+C,YAA/C,EAA8DpB,IAAD,IAAU;AACnE,cAAMlE,KAAK,GAAG,KAAKgF,eAAL,CAAqBd,IAArB,CAAd;AACA,aAAKtC,QAAL,CAAcxH,IAAd,CAAmB4F,KAAnB;AACH,OAHD;AAIH;;AACD,QAAI,KAAK6B,eAAL,CAAqB4D,SAArB,CAA+BrG,MAA/B,GAAwC,CAA5C,EAA+C;AAC3CzF,MAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BG,kBAA5B,CAA+CP,KAA/C,EAAsD,YAAtD,EAAqEpB,IAAD,IAAU;AAC1E,cAAMlE,KAAK,GAAG,KAAKgF,eAAL,CAAqBd,IAArB,CAAd;AACA,aAAKrC,eAAL,CAAqBzH,IAArB,CAA0B4F,KAA1B;AACH,OAHD;AAIH;;AACD,QAAI,KAAKoC,IAAL,CAAUM,SAAV,KAAwB,UAA5B,EAAwC;AACpC,UAAI,KAAKZ,WAAL,CAAiB2D,SAAjB,CAA2BrG,MAA3B,GAAoC,CAAxC,EAA2C;AACvCzF,QAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BC,WAA5B,CAAwCL,KAAxC,EAA+C,aAA/C,EAA+DpB,IAAD,IAAU;AACpE,eAAKpC,WAAL,CAAiB1H,IAAjB,CAAsB8J,IAAtB;AACH,SAFD;AAGH;;AACD,UAAI,KAAKnC,kBAAL,CAAwB0D,SAAxB,CAAkCrG,MAAlC,GAA2C,CAA/C,EAAkD;AAC9CzF,QAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BG,kBAA5B,CAA+CP,KAA/C,EAAsD,aAAtD,EAAsEpB,IAAD,IAAU;AAC3E,eAAKpC,WAAL,CAAiB1H,IAAjB,CAAsB8J,IAAtB;AACH,SAFD;AAGH;AACJ;AACJ;;AACDpB,EAAAA,0BAA0B,GAAG;AACzBnJ,IAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BC,WAA5B,CAAwC,KAAKnF,OAA7C,EAAsD,OAAtD,EAA+D,MAAM;AACjE,WAAKc,UAAL,CAAgBlH,IAAhB,CAAqB;AAAE6F,QAAAA,OAAO,EAAE;AAAX,OAArB;AACH,KAFD;AAGAtG,IAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BG,kBAA5B,CAA+C,KAAKrF,OAApD,EAA6D,OAA7D,EAAsE,MAAM;AACxE,WAAKe,iBAAL,CAAuBnH,IAAvB,CAA4B;AAAE6F,QAAAA,OAAO,EAAE;AAAX,OAA5B;AACA,WAAKoF,mBAAL;AACH,KAHD;AAIA1L,IAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BC,WAA5B,CAAwC,KAAKnF,OAA7C,EAAsD,OAAtD,EAAgEsF,KAAD,IAAW;AACtE,WAAKtE,UAAL,CAAgBpH,IAAhB,CAAqB0L,KAArB;AACH,KAFD;AAGAnM,IAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BG,kBAA5B,CAA+C,KAAKrF,OAApD,EAA6D,OAA7D,EAAuEsF,KAAD,IAAW;AAC7E,WAAKrE,iBAAL,CAAuBrH,IAAvB,CAA4B0L,KAA5B;AACH,KAFD;AAGA,SAAKH,WAAL,CAAiB,KAAKnF,OAAtB,EAA+B,QAA/B,EAAyC,KAAKT,cAA9C,EAA8D,KAAKqB,WAAnE;AACA,SAAKyE,kBAAL,CAAwB,KAAKrF,OAA7B,EAAsC,QAAtC,EAAgD,KAAKT,cAArD,EAAqE,KAAKsB,kBAA1E;AACH;;AACDsE,EAAAA,WAAW,CAACI,MAAD,EAASC,SAAT,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2C;AAClDvM,IAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BC,WAA5B,CAAwCI,MAAxC,EAAgDC,SAAhD,EAA2D,MAAM;AAC7DE,MAAAA,SAAS,CAAC9L,IAAV,CAAe6L,UAAU,EAAzB;AACH,KAFD;AAGH;;AACDJ,EAAAA,kBAAkB,CAACE,MAAD,EAASC,SAAT,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2C;AACzDvM,IAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BG,kBAA5B,CAA+CE,MAA/C,EAAuDC,SAAvD,EAAkE,MAAM;AACpEE,MAAAA,SAAS,CAAC9L,IAAV,CAAe6L,UAAU,EAAzB;AACH,KAFD;AAGH;;AACDjD,EAAAA,cAAc,GAAG;AACb,QAAI;AACA,WAAKlI,OAAL,GAAenB,MAAM,CAACqE,MAAP,CAAc,KAAKoE,IAAL,CAAUM,SAAxB,EAAmCM,cAAnC,CAAkD,KAAKlI,OAAvD,CAAf;AACH,KAFD,CAGA,OAAOgL,KAAP,EAAc;AACV;AACH;AACJ;;AAxSsB;;AA0S3BjG,oBAAoB,CAAC5D,IAArB;AAAA,mBAAkH4D,oBAAlH,EAvcyGjI,EAuczG,mBAAwJA,EAAE,CAACQ,UAA3J,GAvcyGR,EAuczG,mBAAkLkF,yBAAlL;AAAA;;AACA+C,oBAAoB,CAACsG,IAArB,kBAxcyGvO,EAwczG;AAAA,QAAsGiI,oBAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxcyGjI,MAAAA,EAwcqf,oBAA9lB;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDAzcyGA,EAyczG,mBAA4FiI,oBAA5F,EAA8H,CAAC;AACnHjF,IAAAA,IAAI,EAAEvC,SAD6G;AAEnHoH,IAAAA,IAAI,EAAE,CAAC;AACCkE,MAAAA,QAAQ,EAAE,cADX;AAECyC,MAAAA,QAAQ,EAAE;AAFX,KAAD;AAF6G,GAAD,CAA9H,EAM4B,YAAY;AAAE,WAAO,CAAC;AAAExL,MAAAA,IAAI,EAAEhD,EAAE,CAACQ;AAAX,KAAD,EAA0B;AAAEwC,MAAAA,IAAI,EAAEkC;AAAR,KAA1B,CAAP;AAAwE,GANlH,EAMoI;AAAEsF,IAAAA,IAAI,EAAE,CAAC;AAC7HxH,MAAAA,IAAI,EAAEtC;AADuH,KAAD,CAAR;AAEpHgJ,IAAAA,UAAU,EAAE,CAAC;AACb1G,MAAAA,IAAI,EAAE7C;AADO,KAAD,CAFwG;AAIpHwJ,IAAAA,iBAAiB,EAAE,CAAC;AACpB3G,MAAAA,IAAI,EAAE7C;AADc,KAAD,CAJiG;AAMpHyJ,IAAAA,UAAU,EAAE,CAAC;AACb5G,MAAAA,IAAI,EAAE7C;AADO,KAAD,CANwG;AAQpH0J,IAAAA,iBAAiB,EAAE,CAAC;AACpB7G,MAAAA,IAAI,EAAE7C;AADc,KAAD,CARiG;AAUpHqJ,IAAAA,WAAW,EAAE,CAAC;AACdxG,MAAAA,IAAI,EAAE7C;AADQ,KAAD,CAVuG;AAYpHsJ,IAAAA,kBAAkB,EAAE,CAAC;AACrBzG,MAAAA,IAAI,EAAE7C;AADe,KAAD,CAZgG;AAcpH2J,IAAAA,SAAS,EAAE,CAAC;AACZ9G,MAAAA,IAAI,EAAE7C;AADM,KAAD,CAdyG;AAgBpH4J,IAAAA,gBAAgB,EAAE,CAAC;AACnB/G,MAAAA,IAAI,EAAE7C;AADa,KAAD,CAhBkG;AAkBpH6J,IAAAA,QAAQ,EAAE,CAAC;AACXhH,MAAAA,IAAI,EAAE7C;AADK,KAAD,CAlB0G;AAoBpH8J,IAAAA,eAAe,EAAE,CAAC;AAClBjH,MAAAA,IAAI,EAAE7C;AADY,KAAD,CApBmG;AAsBpH+J,IAAAA,WAAW,EAAE,CAAC;AACdlH,MAAAA,IAAI,EAAE7C;AADQ,KAAD,CAtBuG;AAwBpHgK,IAAAA,kBAAkB,EAAE,CAAC;AACrBnH,MAAAA,IAAI,EAAE7C;AADe,KAAD;AAxBgG,GANpI;AAAA;;AAkCA,MAAMsO,8BAAN,CAAqC;AACjC5N,EAAAA,WAAW,CAAC2D,EAAD,EAAK0D,aAAL,EAAoB;AAC3B,SAAK1D,EAAL,GAAUA,EAAV;AACA,SAAK0D,aAAL,GAAqBA,aAArB;AACA,SAAK1D,EAAL,GAAUA,EAAV;AACA,SAAK0D,aAAL,GAAqBA,aAArB;AACH;;AACDkC,EAAAA,QAAQ,GAAG;AACP,SAAKI,IAAL,CAAUC,SAAV,GAAsB,IAAtB;AACA,SAAK/I,IAAL,GAAYgJ,IAAZ,CAAiB,MAAM;AACnB,UAAI,CAAC,KAAKzJ,SAAV,EAAqB;AACjB,aAAKA,SAAL,GAAiB,IAAIL,qBAAJ,CAA0B,KAAK4J,IAA/B,CAAjB;AACA,aAAKvJ,SAAL,CAAeF,gBAAf,CAAgCgG,SAAhC,CAA2CxE,EAAD,IAAQ;AAC9C,eAAKwI,KAAL;AACH,SAFD;AAGH;;AACD,WAAKJ,IAAL;AACH,KARD;AASH;;AACDjJ,EAAAA,IAAI,GAAG;AACH,WAAO3B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,YAAM,KAAKmI,aAAL,CAAmBlB,IAAnB,CAAwB;AAAEG,QAAAA,QAAQ,EAAE,CAAC,UAAD;AAAZ,OAAxB,CAAN;AACA,WAAKuH,SAAL,GAAiB,IAAI3M,MAAM,CAACC,aAAP,CAAqB2M,SAAzB,CAAmC,KAAKnK,EAAL,CAAQI,aAAR,CAAsB0F,aAAtB,CAAoC,KAApC,CAAnC,CAAjB;;AACA,WAAK,MAAMsE,CAAX,IAAgB,KAAKpE,IAAL,CAAUqE,IAA1B,EAAgC;AAC5B,YAAIC,QAAQ,GAAGF,CAAC,CAAC,CAAD,CAAhB;AACA,YAAIxI,MAAM,GAAGwI,CAAC,CAAC,CAAD,CAAd;;AACA,YAAI,EAAEE,QAAQ,YAAYrM,KAAtB,CAAJ,EAAkC;AAC9BqM,UAAAA,QAAQ,GAAG,CAACA,QAAD,CAAX;AACH;;AACD,YAAI,EAAE1I,MAAM,YAAY3D,KAApB,CAAJ,EAAgC;AAC5B2D,UAAAA,MAAM,GAAG,CAACA,MAAD,CAAT;AACH;;AACD,aAAK,MAAM2I,CAAX,IAAgBD,QAAhB,EAA0B;AACtB,gBAAMC,CAAC,CAACtE,SAAF,CAAYuE,UAAZ,EAAN;AACH;;AACD,aAAK,MAAMD,CAAX,IAAgB3I,MAAhB,EAAwB;AACpB,cAAI,CAAC2I,CAAC,CAACtE,SAAP,EAAkB;AACd;AACH;;AACD,gBAAMsE,CAAC,CAACtE,SAAF,CAAY/I,IAAZ,EAAN;AACA,gBAAM8I,IAAI,GAAGuE,CAAC,CAACtE,SAAF,CAAYD,IAAzB;;AACA,cAAIA,IAAI,CAACvJ,SAAL,KAAmBI,SAAnB,IAAgCmJ,IAAI,CAAC1I,aAAL,KAAuBT,SAA3D,EAAsE;AAClE,kBAAM4N,KAAK,CAAC,0DACR,+BADO,CAAX;AAEH;AACJ;;AACD,aAAKP,SAAL,CAAeG,IAAf,CAAoBC,QAAQ,CAACI,GAAT,CAAaxK,CAAC,IAAIA,CAAC,CAAC+F,SAAF,CAAY7B,OAA9B,CAApB,EAA4DxC,MAAM,CAAC8I,GAAP,CAAWxK,CAAC,IAAIA,CAAC,CAAC+F,SAAF,CAAY7B,OAA5B,CAA5D;AACH;AACJ,KA5Be,CAAhB;AA6BH;;AACD+B,EAAAA,IAAI,CAACW,KAAD,EAAQ;AACR,SAAKrK,SAAL,CAAeS,IAAf,CAAoB4J,KAApB;AACH;;AACDP,EAAAA,KAAK,GAAG;AACJ,SAAK2D,SAAL,CAAe/D,IAAf,CAAoB,KAAK1J,SAAL,CAAeO,YAAf,EAApB;AACH;;AAvDgC;;AAyDrCiN,8BAA8B,CAACpK,IAA/B;AAAA,mBAA4HoK,8BAA5H,EApiByGzO,EAoiBzG,mBAA4KA,EAAE,CAACQ,UAA/K,GApiByGR,EAoiBzG,mBAAsMkF,yBAAtM;AAAA;;AACAuJ,8BAA8B,CAACF,IAA/B,kBAriByGvO,EAqiBzG;AAAA,QAAgHyO,8BAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAriByGzO,MAAAA,EAqiB+H,oBAAxO;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDAtiByGA,EAsiBzG,mBAA4FyO,8BAA5F,EAAwI,CAAC;AAC7HzL,IAAAA,IAAI,EAAEvC,SADuH;AAE7HoH,IAAAA,IAAI,EAAE,CAAC;AACCkE,MAAAA,QAAQ,EAAE,yBADX;AAECyC,MAAAA,QAAQ,EAAE;AAFX,KAAD;AAFuH,GAAD,CAAxI,EAM4B,YAAY;AAAE,WAAO,CAAC;AAAExL,MAAAA,IAAI,EAAEhD,EAAE,CAACQ;AAAX,KAAD,EAA0B;AAAEwC,MAAAA,IAAI,EAAEkC;AAAR,KAA1B,CAAP;AAAwE,GANlH,EAMoI;AAAEsF,IAAAA,IAAI,EAAE,CAAC;AAC7HxH,MAAAA,IAAI,EAAEtC;AADuH,KAAD;AAAR,GANpI;AAAA;;AAUA,MAAMyO,4BAAN,CAAmC;AAC/BtO,EAAAA,WAAW,CAAC2D,EAAD,EAAK0D,aAAL,EAAoB;AAC3B,SAAK1D,EAAL,GAAUA,EAAV;AACA,SAAK0D,aAAL,GAAqBA,aAArB;AACA,SAAK1D,EAAL,GAAUA,EAAV;AACA,SAAK0D,aAAL,GAAqBA,aAArB;AACH;;AACDkC,EAAAA,QAAQ,GAAG;AACP,SAAKI,IAAL,CAAUC,SAAV,GAAsB,IAAtB;AACH;;AACDuE,EAAAA,UAAU,GAAG;AACT,WAAOjP,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,UAAI,KAAK6I,OAAT,EAAkB;AACd;AACH;;AACD,YAAM,KAAKV,aAAL,CAAmBlB,IAAnB,CAAwB;AAAEG,QAAAA,QAAQ,EAAE,CAAC,UAAD;AAAZ,OAAxB,CAAN;AACA,UAAIrG,GAAJ;AACAA,MAAAA,GAAG,GAAG4E,MAAM,CAAC0J,MAAP,CAAc,KAAK5E,IAAnB,CAAN;AACA1J,MAAAA,GAAG,CAACuO,WAAJ,GAAkB,KAAK7K,EAAL,CAAQI,aAAR,CAAsB0F,aAAtB,CAAoC,KAApC,CAAlB;AACA,WAAK1B,OAAL,GAAe,IAAI7G,MAAM,CAACC,aAAP,CAAqBsN,cAAzB,CAAwCxO,GAAxC,CAAf;AACH,KATe,CAAhB;AAUH;;AArB8B;;AAuBnCqO,4BAA4B,CAAC9K,IAA7B;AAAA,mBAA0H8K,4BAA1H,EAvkByGnP,EAukBzG,mBAAwKA,EAAE,CAACQ,UAA3K,GAvkByGR,EAukBzG,mBAAkMkF,yBAAlM;AAAA;;AACAiK,4BAA4B,CAACZ,IAA7B,kBAxkByGvO,EAwkBzG;AAAA,QAA8GmP,4BAA9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxkByGnP,MAAAA,EAwkByH,oBAAlO;AAAA;AAAA;AAAA;AAAA;;AACA;AAAA,qDAzkByGA,EAykBzG,mBAA4FmP,4BAA5F,EAAsI,CAAC;AAC3HnM,IAAAA,IAAI,EAAEvC,SADqH;AAE3HoH,IAAAA,IAAI,EAAE,CAAC;AACCkE,MAAAA,QAAQ,EAAE,uBADX;AAECyC,MAAAA,QAAQ,EAAE;AAFX,KAAD;AAFqH,GAAD,CAAtI,EAM4B,YAAY;AAAE,WAAO,CAAC;AAAExL,MAAAA,IAAI,EAAEhD,EAAE,CAACQ;AAAX,KAAD,EAA0B;AAAEwC,MAAAA,IAAI,EAAEkC;AAAR,KAA1B,CAAP;AAAwE,GANlH,EAMoI;AAAEsF,IAAAA,IAAI,EAAE,CAAC;AAC7HxH,MAAAA,IAAI,EAAEtC;AADuH,KAAD;AAAR,GANpI;AAAA;;AAUA,MAAM6O,qBAAN,CAA4B;;AAE5BA,qBAAqB,CAAClL,IAAtB;AAAA,mBAAmHkL,qBAAnH;AAAA;;AACAA,qBAAqB,CAACC,IAAtB,kBAtlByGxP,EAslBzG;AAAA,QAAoHuP;AAApH;AAKAA,qBAAqB,CAACE,IAAtB,kBA3lByGzP,EA2lBzG;AAAA,aAAsJ,CAC9IkF,yBAD8I;AAAtJ;;AAGA;AAAA,qDA9lByGlF,EA8lBzG,mBAA4FuP,qBAA5F,EAA+H,CAAC;AACpHvM,IAAAA,IAAI,EAAErC,QAD8G;AAEpHkH,IAAAA,IAAI,EAAE,CAAC;AACC6H,MAAAA,YAAY,EAAE,CACVzH,oBADU,EAEVwG,8BAFU,EAGVU,4BAHU,CADf;AAMCQ,MAAAA,SAAS,EAAE,CACPzK,yBADO,CANZ;AASC0K,MAAAA,OAAO,EAAE,CACL3H,oBADK,EAELwG,8BAFK,EAGLU,4BAHK;AATV,KAAD;AAF8G,GAAD,CAA/H;AAAA;;AAmBA,SAASU,WAAT,CAAqBnC,KAArB,EAA4B;AACxB,SAAOA,KAAK,CAAC9E,OAAN,KAAkBvH,SAAzB;AACH;;AACD,MAAMyO,iBAAN,CAAwB;AACpBjP,EAAAA,WAAW,CAACqH,aAAD,EAAgB;AACvB,SAAKA,aAAL,GAAqBA,aAArB;AACH;;AACD6H,EAAAA,YAAY,GAAG;AACX,WAAOhQ,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,UAAI,KAAKiQ,WAAL,KAAqB3O,SAAzB,EAAoC;AAChC;AACH;;AACD,YAAM,KAAK6G,aAAL,CAAmBlB,IAAnB,CAAwB;AAAEG,QAAAA,QAAQ,EAAE,CAAC,aAAD;AAAZ,OAAxB,CAAN;AACA,WAAK6I,WAAL,GAAmB,IAAIjO,MAAM,CAACC,aAAP,CAAqBiO,WAAzB,EAAnB;AACAlO,MAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BC,WAA5B,CAAwC,KAAKiC,WAA7C,EAA0D,IAA1D,EAAgE,MAAM;AAClE,cAAMpH,OAAO,GAAG,KAAKoH,WAAL,CAAiBE,eAAjB,EAAhB;AACA,aAAKC,IAAL,CAAUvH,OAAV,GAAoBA,OAApB;AACA,aAAKuH,IAAL,CAAU3F,IAAV,CAAeM,SAAf,GAA2BlC,OAAO,CAACiC,YAAR,EAA3B;;AACA,YAAI,KAAKsF,IAAL,CAAU3F,IAAV,CAAetH,OAAf,KAA2B7B,SAA3B,IAAwCqE,MAAM,CAAC6E,YAAP,CAAoB,KAAK4F,IAAL,CAAU3F,IAA9B,CAA5C,EAAiF;AAC7E,eAAK2F,IAAL,CAAU3F,IAAV,CAAetH,OAAf,GAAyB0F,OAAO,CAACwH,UAAR,EAAzB;AACH;;AACD,aAAKD,IAAL,CAAUvH,OAAV,CAAkB+B,IAAlB;AACH,OARD;AASH,KAfe,CAAhB;AAgBH;;AACD0F,EAAAA,UAAU,CAAC3C,KAAD,EAAQxK,OAAR,EAAiB;AACvB,WAAOnD,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,YAAM,KAAKgQ,YAAL,EAAN;AACA,aAAO,IAAI9J,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,aAAKgK,IAAL,GAAYN,WAAW,CAACnC,KAAD,CAAX,GAAqBA,KAArB,GAA6BA,KAAK,CAACjD,SAA/C;AACA1I,QAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BC,WAA5B,CAAwC,KAAKiC,WAA7C,EAA0D,IAA1D,EAAgE,MAAM;AAClE9J,UAAAA,OAAO,CAAC,KAAKiK,IAAL,CAAUvH,OAAX,CAAP;AACH,SAFD;AAGA7G,QAAAA,MAAM,CAACC,aAAP,CAAqB8L,MAArB,CAA4BC,WAA5B,CAAwC,KAAKiC,WAA7C,EAA0D,QAA1D,EAAoE,MAAM;AACtE7J,UAAAA,MAAM;AACT,SAFD;AAGA,aAAK6J,WAAL,CAAiBK,UAAjB,CAA4B,KAAKF,IAAL,CAAUvH,OAAtC,EAA+C1F,OAA/C;AACH,OATM,CAAP;AAUH,KAZe,CAAhB;AAaH;;AApCmB;;AAsCxB4M,iBAAiB,CAACzL,IAAlB;AAAA,mBAA+GyL,iBAA/G,EA1pByG9P,EA0pBzG,UAAkJkF,yBAAlJ;AAAA;;AACA4K,iBAAiB,CAAClI,KAAlB,kBA3pByG5H,EA2pBzG;AAAA,SAAmH8P,iBAAnH;AAAA,WAAmHA,iBAAnH;AAAA,cAAkJ;AAAlJ;;AACA;AAAA,qDA5pByG9P,EA4pBzG,mBAA4F8P,iBAA5F,EAA2H,CAAC;AAChH9M,IAAAA,IAAI,EAAE3C,UAD0G;AAEhHwH,IAAAA,IAAI,EAAE,CAAC;AACCC,MAAAA,UAAU,EAAE;AADb,KAAD;AAF0G,GAAD,CAA3H,EAK4B,YAAY;AAAE,WAAO,CAAC;AAAE9E,MAAAA,IAAI,EAAEkC;AAAR,KAAD,CAAP;AAA+C,GALzF;AAAA;AAOA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAASX,gBAAT,EAA2B0D,oBAA3B,EAAiD6H,iBAAjD,EAAoE9H,eAApE,EAAqFmH,4BAArF,EAAmHV,8BAAnH,EAAmJvJ,yBAAnJ,EAA8KqK,qBAA9K","sourcesContent":["import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, LOCALE_ID, Injectable, Inject, Optional, ElementRef, Component, Input, NgModule } from '@angular/core';\n\nclass GoogleChartsDataTable {\n    constructor(opt) {\n        this.opt = opt;\n        this.dataTableChanged = new EventEmitter();\n        if (opt) {\n            this._setDataTable(opt.dataTable, opt.firstRowIsData);\n        }\n    }\n    send() {\n        if (this.query === undefined) {\n            return;\n        }\n        this.query.send((queryResponse) => {\n            this.setDataTable(queryResponse.getDataTable());\n            if (this.opt.queryCallback) {\n                this.opt.queryCallback(queryResponse);\n            }\n        });\n    }\n    init(opt) {\n        if (opt) {\n            this.opt = opt;\n        }\n        if (this.tid !== undefined) {\n            // doesn't work, see https://github.com/google/google-visualization-issues/issues/2381\n            // this.query.abort();\n            window.clearInterval(this.tid);\n            this.tid = undefined;\n        }\n        if (this.opt.dataSourceUrl) {\n            this.query = new google.visualization.Query(this.opt.dataSourceUrl);\n            if (this.opt.query) {\n                this.query.setQuery(this.opt.query);\n            }\n            if (this.opt.timeout !== undefined) {\n                this.query.setTimeout(this.opt.timeout);\n            }\n            if (this.opt.refreshInterval) {\n                // this.query.setRefreshInterval(this.opt.refreshInterval);\n                this.tid = window.setInterval(() => {\n                    this.send();\n                }, this.opt.refreshInterval * 1000);\n            }\n            this.send();\n        }\n        else {\n            this.setDataTable(this.opt.dataTable);\n        }\n    }\n    /**\n     * @returns Underlying google.visualization.DataTable\n     */\n    getDataTable() {\n        return this.dataTable;\n    }\n    setDataTable(dt, firstRowIsData) {\n        if (firstRowIsData === undefined) {\n            firstRowIsData = this.opt.firstRowIsData;\n        }\n        this._setDataTable(dt, firstRowIsData);\n        this.dataTableChanged.emit(this.dataTable);\n    }\n    _setDataTable(dt, firstRowIsData) {\n        if (Array.isArray(dt)) {\n            dt = google.visualization.arrayToDataTable(dt, firstRowIsData);\n        }\n        this.dataTable = dt;\n        this.reformat();\n    }\n    /**\n     * Applies formatters to data columns, if defined\n     */\n    reformat() {\n        const dt = this.dataTable;\n        if (dt === undefined) {\n            return;\n        }\n        if (this.opt.formatters === undefined) {\n            return;\n        }\n        for (const formatterConfig of this.opt.formatters) {\n            let formatter;\n            if (formatterConfig.type === 'PatternFormat') {\n                const fmtOptions = formatterConfig.options;\n                formatter = new google.visualization.PatternFormat(fmtOptions.pattern);\n                formatter.format(dt, formatterConfig.columns, fmtOptions.dstColumnIndex);\n                continue;\n            }\n            const formatterConstructor = google.visualization[formatterConfig.type];\n            const formatterOptions = formatterConfig.options;\n            formatter = new formatterConstructor(formatterOptions);\n            if (formatterConfig.type === 'ColorFormat' && formatterOptions) {\n                const fmtOptions = formatterOptions;\n                if (fmtOptions.ranges) {\n                    for (const range of fmtOptions.ranges) {\n                        if (typeof (range.fromBgColor) !== 'undefined'\n                            && typeof (range.toBgColor) !== 'undefined') {\n                            formatter.addGradientRange(range.from, range.to, range.color, range.fromBgColor, range.toBgColor);\n                        }\n                        else {\n                            formatter.addRange(range.from, range.to, range.color, range.bgcolor);\n                        }\n                    }\n                }\n            }\n            for (const col of formatterConfig.columns) {\n                formatter.format(dt, col);\n            }\n        }\n    }\n}\nGoogleChartsDataTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsDataTable, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\nGoogleChartsDataTable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.14\", type: GoogleChartsDataTable, outputs: { dataTableChanged: \"dataTableChanged\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsDataTable, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: undefined }]; }, propDecorators: { dataTableChanged: [{\n                type: Output\n            }] } });\n\nclass ChartHTMLTooltip {\n    constructor(el) {\n        this.el = el;\n    }\n    setPosition(x, y) {\n        this.el.nativeElement.style.left = x + ChartHTMLTooltip.PIXELS;\n        this.el.nativeElement.style.top = y + ChartHTMLTooltip.PIXELS;\n    }\n    getDOMElement() {\n        return this.el;\n    }\n}\nChartHTMLTooltip.PIXELS = 'px';\n\nclass GoogleChartsLoaderService {\n    constructor(localeId, googleChartsSettings) {\n        this.googleChartsSettings = googleChartsSettings;\n        this.loadedPackages = [];\n        this.loaded = false;\n        const defaultSettings = {\n            googleChartsVersion: '50',\n            language: localeId,\n        };\n        this.googleChartsSettings = Object.assign(Object.assign({}, defaultSettings), this.googleChartsSettings);\n        this.googleScriptLoadingNotifier = new EventEmitter();\n        this.googleChartLoadingNotifier = new EventEmitter();\n        this.googleScriptIsLoading = false;\n        this.googleChartIsLoading = false;\n        this.loadGoogleChartsScriptPromise = new Promise((resolve, reject) => {\n            if (typeof google !== 'undefined' && google.charts) {\n                resolve();\n            }\n            else if (!this.googleScriptIsLoading) {\n                this.googleScriptIsLoading = true;\n                const script = document.createElement('script');\n                script.type = 'text/javascript';\n                script.src = 'https://www.gstatic.com/charts/loader.js';\n                script.async = true;\n                script.defer = true;\n                script.onload = () => {\n                    this.googleScriptIsLoading = false;\n                    this.googleScriptLoadingNotifier.emit(true);\n                    resolve();\n                };\n                script.onerror = () => {\n                    this.googleScriptIsLoading = false;\n                    this.googleScriptLoadingNotifier.emit(false);\n                    reject();\n                };\n                document.getElementsByTagName('head')[0].appendChild(script);\n            }\n            else {\n                this.googleScriptLoadingNotifier.subscribe((loaded) => {\n                    if (loaded) {\n                        resolve();\n                    }\n                    else {\n                        reject();\n                    }\n                });\n            }\n        });\n    }\n    load(settings) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loadGoogleChartsScriptPromise;\n            yield new Promise((resolve) => {\n                if (this.googleChartIsLoading) {\n                    this.googleChartLoadingNotifier.subscribe(() => {\n                        this.doLoad(resolve, settings);\n                    });\n                    return;\n                }\n                this.doLoad(resolve, settings);\n            });\n        });\n    }\n    doLoad(resolve, settings) {\n        settings = Object.assign(Object.assign({}, this.googleChartsSettings), settings);\n        if (!settings.packages && this.loaded) {\n            resolve();\n            return;\n        }\n        if (settings.packages) {\n            let pkgs = settings.packages.filter(p => this.loadedPackages.indexOf(p) < 0);\n            if (pkgs.length == 0 && this.loaded) {\n                resolve();\n                return;\n            }\n            settings.packages = pkgs;\n        }\n        const _settings = settings;\n        _settings.callback = () => {\n            this.googleChartIsLoading = false;\n            if (_settings.packages !== undefined) {\n                this.loadedPackages = this.loadedPackages.concat(_settings.packages);\n            }\n            this.loaded = true;\n            this.googleChartLoadingNotifier.emit();\n            resolve();\n        };\n        this.googleChartIsLoading = true;\n        google.charts.load(settings.googleChartsVersion, _settings);\n    }\n}\nGoogleChartsLoaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsLoaderService, deps: [{ token: LOCALE_ID }, { token: 'googleChartsSettings', optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nGoogleChartsLoaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsLoaderService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsLoaderService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [LOCALE_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: ['googleChartsSettings']\n                }, {\n                    type: Optional\n                }] }]; } });\n\nvar GoogleChartType;\n(function (GoogleChartType) {\n    GoogleChartType[\"AnnotationChart\"] = \"AnnotationChart\";\n    GoogleChartType[\"AreaChart\"] = \"AreaChart\";\n    GoogleChartType[\"BarChart\"] = \"BarChart\";\n    GoogleChartType[\"BubbleChart\"] = \"BubbleChart\";\n    GoogleChartType[\"Calendar\"] = \"Calendar\";\n    GoogleChartType[\"CandlestickChart\"] = \"CandlestickChart\";\n    GoogleChartType[\"ColumnChart\"] = \"ColumnChart\";\n    GoogleChartType[\"ComboChart\"] = \"ComboChart\";\n    GoogleChartType[\"Gantt\"] = \"Gantt\";\n    GoogleChartType[\"Gauge\"] = \"Gauge\";\n    GoogleChartType[\"GeoChart\"] = \"GeoChart\";\n    GoogleChartType[\"Histogram\"] = \"Histogram\";\n    GoogleChartType[\"LineChart\"] = \"LineChart\";\n    GoogleChartType[\"Map\"] = \"Map\";\n    GoogleChartType[\"OrgChart\"] = \"OrgChart\";\n    GoogleChartType[\"PieChart\"] = \"PieChart\";\n    GoogleChartType[\"Sankey\"] = \"Sankey\";\n    GoogleChartType[\"ScatterChart\"] = \"ScatterChart\";\n    GoogleChartType[\"SteppedAreaChart\"] = \"SteppedAreaChart\";\n    GoogleChartType[\"Table\"] = \"Table\";\n    GoogleChartType[\"Timeline\"] = \"Timeline\";\n    GoogleChartType[\"TreeMap\"] = \"TreeMap\";\n    GoogleChartType[\"VegaChart\"] = \"VegaChart\";\n    GoogleChartType[\"WordTree\"] = \"WordTree\";\n})(GoogleChartType || (GoogleChartType = {}));\nclass GoogleChartComponent {\n    constructor(el, loaderService) {\n        this.el = el;\n        this.loaderService = loaderService;\n        this.selectListener = () => {\n            const event = {\n                message: 'select',\n                row: null,\n                column: null,\n                selectedRowValues: [],\n                selectedRowFormattedValues: [],\n                columnLabel: ''\n            };\n            const s = this.wrapper.visualization.getSelection();\n            const gs = s[s.length - 1];\n            if (!gs) {\n                event.message = 'deselect';\n                return event;\n            }\n            const selection = gs;\n            if (gs.row != null) {\n                event.row = selection.row;\n                const selectedRowValues = [];\n                const selectedRowFormattedValues = [];\n                const dataTable = this.wrapper.getDataTable();\n                const numberOfColumns = dataTable.getNumberOfColumns();\n                for (let i = 0; i < numberOfColumns; i++) {\n                    selectedRowValues.push(dataTable.getValue(selection.row, i));\n                    selectedRowFormattedValues.push(dataTable.getFormattedValue(selection.row, i));\n                }\n                event.selectedRowValues = selectedRowValues;\n                event.selectedRowFormattedValues = selectedRowFormattedValues;\n            }\n            if (selection.column != null) {\n                event.column = selection.column;\n                event.columnLabel = this.getColumnLabelAtPosition(selection);\n            }\n            if (gs.name) {\n                event.columnLabel = gs.name;\n            }\n            return event;\n        };\n        this.chartSelect = new EventEmitter();\n        this.chartSelectOneTime = new EventEmitter();\n        this.chartReady = new EventEmitter();\n        this.chartReadyOneTime = new EventEmitter();\n        this.chartError = new EventEmitter();\n        this.chartErrorOneTime = new EventEmitter();\n        this.mouseOver = new EventEmitter();\n        this.mouseOverOneTime = new EventEmitter();\n        this.mouseOut = new EventEmitter();\n        this.mouseOutOneTime = new EventEmitter();\n        this.regionClick = new EventEmitter();\n        this.regionClickOneTime = new EventEmitter();\n    }\n    ngOnInit() {\n        this.HTMLel = this.el.nativeElement.querySelector('div');\n        if (Object.isExtensible(this.data)) {\n            this.data.component = this;\n        }\n        this.options = this.data.options;\n        this.init().then(() => {\n            this.draw();\n        });\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loaderService.load();\n            this.recreateWrapper();\n        });\n    }\n    recreateWrapper() {\n        if (this.wrapper === undefined || this.wrapper.getChartType() !== this.data.chartType) {\n            this.dataTable = new GoogleChartsDataTable(this.data);\n            this.dataTable.dataTableChanged.subscribe((dt) => {\n                this._draw();\n            });\n            // see dataTable in https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n            let temp = this.data;\n            if (this.data.firstRowIsData) {\n                temp = Object.assign(temp, this.data);\n                temp.dataTable = this.dataTable.getDataTable();\n            }\n            this.wrapper = new google.visualization.ChartWrapper(temp);\n            this.registerChartWrapperEvents();\n            /* Calling draw even without data is the only way to pass the HTMl element\n               when using the chart in a dashboard. Don't do this in all other cases:\n               it breaks formatters with remote data source, hence the conditional. */\n            if (temp.dataTable === undefined && temp.dataSourceUrl === undefined) {\n                try {\n                    this.wrapper.draw(this.HTMLel);\n                }\n                catch (err) { }\n            }\n        }\n    }\n    _draw() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const dt = this.dataTable.getDataTable();\n            if (dt === undefined) {\n                return;\n            }\n            this.convertOptions();\n            this.recreateWrapper();\n            this.wrapper.setOptions(this.options);\n            this.wrapper.setDataTable(dt);\n            this.wrapper.draw(this.HTMLel);\n        });\n    }\n    getDataTable() {\n        return this.dataTable;\n    }\n    draw(value) {\n        if (value === undefined) {\n            value = this.data;\n        }\n        this.options = value.options;\n        this.dataTable.init(value);\n    }\n    getSelectorBySeriesType(seriesType) {\n        const selectors = {\n            bars: 'bar#%s#%r',\n            haxis: 'hAxis#0#label',\n            line: 'point#%s#%r',\n            legend: 'legendentry#%s',\n            area: 'point#%s#%r'\n        };\n        const selector = selectors[seriesType];\n        return selector;\n    }\n    /**\n     * Given a column number, counts how many\n     * columns have rol==\"data\". Those are mapped\n     * one-to-one to the series array. When rol is not defined\n     * a column of type number means a series column.\n     * @param column to inspect\n     */\n    getSeriesByColumn(column) {\n        let series = 0;\n        const dataTable = this.wrapper.getDataTable();\n        for (let i = column - 1; i >= 0; i--) {\n            const role = dataTable.getColumnRole(i);\n            const type = dataTable.getColumnType(i);\n            if (role === 'data' || type === 'number') {\n                series++;\n            }\n        }\n        return series;\n    }\n    getBoundingBoxForItem(item) {\n        let boundingBox = { top: 0, left: 0, width: 0, height: 0 };\n        if (this.cli) {\n            const column = item.column;\n            const series = this.getSeriesByColumn(column);\n            const row = item.row;\n            let seriesType = this.options.seriesType;\n            if (this.options.series && this.options.series[series] && this.options.series[series].type) {\n                seriesType = this.options.series[series].type;\n            }\n            if (seriesType) {\n                let selector = this.getSelectorBySeriesType(seriesType);\n                if (selector) {\n                    selector = selector.replace('%s', series + '').replace('%c', column + '').replace('%r', row + '');\n                    const box = this.cli.getBoundingBox(selector);\n                    if (box) {\n                        boundingBox = box;\n                    }\n                }\n            }\n        }\n        return boundingBox;\n    }\n    getValueAtPosition(position) {\n        if (position.row == null) {\n            return null;\n        }\n        const dataTable = this.wrapper.getDataTable();\n        const value = dataTable.getValue(position.row, position.column);\n        return value;\n    }\n    getColumnTypeAtPosition(position) {\n        const dataTable = this.wrapper.getDataTable();\n        const type = dataTable.getColumnType(position.column) || '';\n        return type;\n    }\n    getColumnLabelAtPosition(position) {\n        const dataTable = this.wrapper.getDataTable();\n        const type = dataTable.getColumnLabel(position.column) || '';\n        return type;\n    }\n    getHTMLTooltip() {\n        const tooltipER = new ElementRef(this.el.nativeElement.querySelector('.google-visualization-tooltip'));\n        return new ChartHTMLTooltip(tooltipER);\n    }\n    parseMouseEvent(item) {\n        const chartType = this.wrapper.getChartType();\n        let eventColumn = item.column;\n        if (eventColumn == null) {\n            switch (chartType) {\n                case 'Timeline':\n                    eventColumn = this.wrapper.getDataTable().getNumberOfColumns() === 3 ? 0 : 1;\n                    break;\n                default:\n                    eventColumn = 0;\n            }\n        }\n        const eventRow = item.row;\n        const myItem = {\n            row: eventRow,\n            column: eventColumn\n        };\n        const event = {\n            position: item,\n            boundingBox: this.getBoundingBoxForItem(myItem),\n            value: this.getValueAtPosition(myItem),\n            columnType: this.getColumnTypeAtPosition(myItem),\n            columnLabel: this.getColumnLabelAtPosition(myItem)\n        };\n        return event;\n    }\n    registerChartEvents() {\n        const chart = this.wrapper.getChart();\n        this.cli = chart.getChartLayoutInterface ? chart.getChartLayoutInterface() : null;\n        if (this.mouseOver.observers.length > 0) {\n            google.visualization.events.addListener(chart, 'onmouseover', (item) => {\n                const event = this.parseMouseEvent(item);\n                event.tooltip = this.getHTMLTooltip();\n                this.mouseOver.emit(event);\n            });\n        }\n        if (this.mouseOverOneTime.observers.length > 0) {\n            google.visualization.events.addOneTimeListener(chart, 'onmouseover', (item) => {\n                const event = this.parseMouseEvent(item);\n                event.tooltip = this.getHTMLTooltip();\n                this.mouseOverOneTime.emit(event);\n            });\n        }\n        if (this.mouseOut.observers.length > 0) {\n            google.visualization.events.addListener(chart, 'onmouseout', (item) => {\n                const event = this.parseMouseEvent(item);\n                this.mouseOut.emit(event);\n            });\n        }\n        if (this.mouseOutOneTime.observers.length > 0) {\n            google.visualization.events.addOneTimeListener(chart, 'onmouseout', (item) => {\n                const event = this.parseMouseEvent(item);\n                this.mouseOutOneTime.emit(event);\n            });\n        }\n        if (this.data.chartType === 'GeoChart') {\n            if (this.regionClick.observers.length > 0) {\n                google.visualization.events.addListener(chart, 'regionClick', (item) => {\n                    this.regionClick.emit(item);\n                });\n            }\n            if (this.regionClickOneTime.observers.length > 0) {\n                google.visualization.events.addOneTimeListener(chart, 'regionClick', (item) => {\n                    this.regionClick.emit(item);\n                });\n            }\n        }\n    }\n    registerChartWrapperEvents() {\n        google.visualization.events.addListener(this.wrapper, 'ready', () => {\n            this.chartReady.emit({ message: 'Chart ready' });\n        });\n        google.visualization.events.addOneTimeListener(this.wrapper, 'ready', () => {\n            this.chartReadyOneTime.emit({ message: 'Chart ready (one time)' });\n            this.registerChartEvents();\n        });\n        google.visualization.events.addListener(this.wrapper, 'error', (error) => {\n            this.chartError.emit(error);\n        });\n        google.visualization.events.addOneTimeListener(this.wrapper, 'error', (error) => {\n            this.chartErrorOneTime.emit(error);\n        });\n        this.addListener(this.wrapper, 'select', this.selectListener, this.chartSelect);\n        this.addOneTimeListener(this.wrapper, 'select', this.selectListener, this.chartSelectOneTime);\n    }\n    addListener(source, eventType, listenerFn, evEmitter) {\n        google.visualization.events.addListener(source, eventType, () => {\n            evEmitter.emit(listenerFn());\n        });\n    }\n    addOneTimeListener(source, eventType, listenerFn, evEmitter) {\n        google.visualization.events.addOneTimeListener(source, eventType, () => {\n            evEmitter.emit(listenerFn());\n        });\n    }\n    convertOptions() {\n        try {\n            this.options = google.charts[this.data.chartType].convertOptions(this.options);\n        }\n        catch (error) {\n            return;\n        }\n    }\n}\nGoogleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartComponent, deps: [{ token: i0.ElementRef }, { token: GoogleChartsLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nGoogleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.14\", type: GoogleChartComponent, selector: \"google-chart\", inputs: { data: \"data\" }, outputs: { chartReady: \"chartReady\", chartReadyOneTime: \"chartReadyOneTime\", chartError: \"chartError\", chartErrorOneTime: \"chartErrorOneTime\", chartSelect: \"chartSelect\", chartSelectOneTime: \"chartSelectOneTime\", mouseOver: \"mouseOver\", mouseOverOneTime: \"mouseOverOneTime\", mouseOut: \"mouseOut\", mouseOutOneTime: \"mouseOutOneTime\", regionClick: \"regionClick\", regionClickOneTime: \"regionClickOneTime\" }, ngImport: i0, template: '<div></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'google-chart',\n                    template: '<div></div>',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: GoogleChartsLoaderService }]; }, propDecorators: { data: [{\n                type: Input\n            }], chartReady: [{\n                type: Output\n            }], chartReadyOneTime: [{\n                type: Output\n            }], chartError: [{\n                type: Output\n            }], chartErrorOneTime: [{\n                type: Output\n            }], chartSelect: [{\n                type: Output\n            }], chartSelectOneTime: [{\n                type: Output\n            }], mouseOver: [{\n                type: Output\n            }], mouseOverOneTime: [{\n                type: Output\n            }], mouseOut: [{\n                type: Output\n            }], mouseOutOneTime: [{\n                type: Output\n            }], regionClick: [{\n                type: Output\n            }], regionClickOneTime: [{\n                type: Output\n            }] } });\n\nclass GoogleChartsDashboardComponent {\n    constructor(el, loaderService) {\n        this.el = el;\n        this.loaderService = loaderService;\n        this.el = el;\n        this.loaderService = loaderService;\n    }\n    ngOnInit() {\n        this.data.component = this;\n        this.init().then(() => {\n            if (!this.dataTable) {\n                this.dataTable = new GoogleChartsDataTable(this.data);\n                this.dataTable.dataTableChanged.subscribe((dt) => {\n                    this._draw();\n                });\n            }\n            this.draw();\n        });\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loaderService.load({ packages: ['controls'] });\n            this.dashboard = new google.visualization.Dashboard(this.el.nativeElement.querySelector('div'));\n            for (const b of this.data.bind) {\n                let controls = b[0];\n                let charts = b[1];\n                if (!(controls instanceof Array)) {\n                    controls = [controls];\n                }\n                if (!(charts instanceof Array)) {\n                    charts = [charts];\n                }\n                for (const c of controls) {\n                    yield c.component.ensureInit();\n                }\n                for (const c of charts) {\n                    if (!c.component) {\n                        continue;\n                    }\n                    yield c.component.init();\n                    const data = c.component.data;\n                    if (data.dataTable !== undefined || data.dataSourceUrl !== undefined) {\n                        throw Error('dataTable and dataSourceUrl cannot be specified when ' +\n                            'chart is drawn in a Dashboard');\n                    }\n                }\n                this.dashboard.bind(controls.map(x => x.component.wrapper), charts.map(x => x.component.wrapper));\n            }\n        });\n    }\n    draw(value) {\n        this.dataTable.init(value);\n    }\n    _draw() {\n        this.dashboard.draw(this.dataTable.getDataTable());\n    }\n}\nGoogleChartsDashboardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsDashboardComponent, deps: [{ token: i0.ElementRef }, { token: GoogleChartsLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nGoogleChartsDashboardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.14\", type: GoogleChartsDashboardComponent, selector: \"google-charts-dashboard\", inputs: { data: \"data\" }, ngImport: i0, template: '<div></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsDashboardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'google-charts-dashboard',\n                    template: '<div></div>',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: GoogleChartsLoaderService }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\nclass GoogleChartsControlComponent {\n    constructor(el, loaderService) {\n        this.el = el;\n        this.loaderService = loaderService;\n        this.el = el;\n        this.loaderService = loaderService;\n    }\n    ngOnInit() {\n        this.data.component = this;\n    }\n    ensureInit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.wrapper) {\n                return;\n            }\n            yield this.loaderService.load({ packages: ['controls'] });\n            let opt;\n            opt = Object.create(this.data);\n            opt.containerId = this.el.nativeElement.querySelector('div');\n            this.wrapper = new google.visualization.ControlWrapper(opt);\n        });\n    }\n}\nGoogleChartsControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsControlComponent, deps: [{ token: i0.ElementRef }, { token: GoogleChartsLoaderService }], target: i0.ɵɵFactoryTarget.Component });\nGoogleChartsControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.14\", type: GoogleChartsControlComponent, selector: \"google-charts-control\", inputs: { data: \"data\" }, ngImport: i0, template: '<div></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartsControlComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'google-charts-control',\n                    template: '<div></div>',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: GoogleChartsLoaderService }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\nclass Ng2GoogleChartsModule {\n}\nNg2GoogleChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: Ng2GoogleChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNg2GoogleChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: Ng2GoogleChartsModule, declarations: [GoogleChartComponent,\n        GoogleChartsDashboardComponent,\n        GoogleChartsControlComponent], exports: [GoogleChartComponent,\n        GoogleChartsDashboardComponent,\n        GoogleChartsControlComponent] });\nNg2GoogleChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: Ng2GoogleChartsModule, providers: [\n        GoogleChartsLoaderService\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: Ng2GoogleChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        GoogleChartComponent,\n                        GoogleChartsDashboardComponent,\n                        GoogleChartsControlComponent,\n                    ],\n                    providers: [\n                        GoogleChartsLoaderService\n                    ],\n                    exports: [\n                        GoogleChartComponent,\n                        GoogleChartsDashboardComponent,\n                        GoogleChartsControlComponent,\n                    ]\n                }]\n        }] });\n\nfunction isComponent(chart) {\n    return chart.wrapper !== undefined;\n}\nclass GoogleChartEditor {\n    constructor(loaderService) {\n        this.loaderService = loaderService;\n    }\n    createEditor() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.chartEditor !== undefined) {\n                return;\n            }\n            yield this.loaderService.load({ packages: ['charteditor'] });\n            this.chartEditor = new google.visualization.ChartEditor();\n            google.visualization.events.addListener(this.chartEditor, 'ok', () => {\n                const wrapper = this.chartEditor.getChartWrapper();\n                this.comp.wrapper = wrapper;\n                this.comp.data.chartType = wrapper.getChartType();\n                if (this.comp.data.options !== undefined || Object.isExtensible(this.comp.data)) {\n                    this.comp.data.options = wrapper.getOptions();\n                }\n                this.comp.wrapper.draw();\n            });\n        });\n    }\n    openDialog(chart, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.createEditor();\n            return new Promise((resolve, reject) => {\n                this.comp = isComponent(chart) ? chart : chart.component;\n                google.visualization.events.addListener(this.chartEditor, 'ok', () => {\n                    resolve(this.comp.wrapper);\n                });\n                google.visualization.events.addListener(this.chartEditor, 'cancel', () => {\n                    reject();\n                });\n                this.chartEditor.openDialog(this.comp.wrapper, options);\n            });\n        });\n    }\n}\nGoogleChartEditor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartEditor, deps: [{ token: GoogleChartsLoaderService }], target: i0.ɵɵFactoryTarget.Injectable });\nGoogleChartEditor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartEditor, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.14\", ngImport: i0, type: GoogleChartEditor, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return [{ type: GoogleChartsLoaderService }]; } });\n\n/*\n * Public API Surface of ng2-google-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ChartHTMLTooltip, GoogleChartComponent, GoogleChartEditor, GoogleChartType, GoogleChartsControlComponent, GoogleChartsDashboardComponent, GoogleChartsLoaderService, Ng2GoogleChartsModule };\n"]},"metadata":{},"sourceType":"module"}