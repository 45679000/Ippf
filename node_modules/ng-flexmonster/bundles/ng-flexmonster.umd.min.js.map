{"version":3,"sources":["ng://ng-flexmonster/flexmonster.component.ts","ng://ng-flexmonster/flexmonster.module.ts"],"names":["FlexmonsterPivot","el","this","cellclick","EventEmitter","celldoubleclick","chartclick","dataerror","datafilecancelled","dataloaded","datachanged","fieldslistclose","fieldslistopen","filterclose","filteropen","drillthroughopen","exportcomplete","exportstart","drillthroughclose","fullscreen","loadingdata","loadinglocalization","loadingolapstructure","loadingreportfile","localizationerror","localizationloaded","olapstructureerror","olapstructureloaded","openingreportfile","printcomplete","printstart","querycomplete","queryerror","ready","reportchange","reportcomplete","reportfilecancelled","reportfileerror","runningquery","unauthorizederror","update","beforetoolbarcreated","beforegriddraw","aftergriddraw","afterchartdraw","root","prototype","ngOnInit","_this","flexmonster","Flexmonster","container","getElementsByClassName","componentFolder","width","height","toolbar","licenseKey","licenseFilePath","report","global","accessibility","shareReportConnection","customizeAPIRequest","customizeCell","customizeChartElement","customizeContextMenu","sortFieldsList","cell","next","event","done","Component","args","selector","template","ElementRef","Input","Output","FlexmonsterPivotModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';\r\nimport * as Flexmonster from 'flexmonster';\r\n\r\n@Component({\r\n  selector: 'fm-pivot',\r\n  template: '<div style=\"width:100%;height:100%;\"><div class=\"fm-ng-wrapper\"></div></div>'\r\n})\r\nexport class FlexmonsterPivot {\r\n  // params\r\n  @Input() toolbar: boolean;\r\n  @Input() licenseKey: string;\r\n  @Input() licenseFilePath: string;\r\n  @Input() width: string | number;\r\n  @Input() height: string | number;\r\n  @Input() componentFolder: string;\r\n  @Input() report: Flexmonster.Report | string;\r\n  @Input() shareReportConnection: Flexmonster.APIClientOptions;\r\n  @Input() global: Flexmonster.Report;\r\n  @Input() accessibility: Flexmonster.AccessibilityOptions;\r\n  @Input() customizeAPIRequest: (request: Object) => Object;\r\n  @Input() customizeCell: (cell: Flexmonster.CellBuilder, data: Flexmonster.CellData) => void;\r\n  @Input() customizeChartElement: (element: Element, data: Flexmonster.ChartData | Flexmonster.ChartLegendItemData) => void;\r\n  @Input() customizeContextMenu: (cell: Flexmonster.ContextMenuItem[], data: Flexmonster.CellData | Flexmonster.ChartData, viewType: string) => Flexmonster.ContextMenuItem[];\r\n  @Input() sortFieldsList: (first: Flexmonster.FieldsListSortingItem, second: Flexmonster.FieldsListSortingItem, fieldsListType: string) => number;\r\n\r\n  // events\r\n  @Output() cellclick: EventEmitter<Flexmonster.CellData> = new EventEmitter();\r\n  @Output() celldoubleclick: EventEmitter<Flexmonster.CellData> = new EventEmitter();\r\n  @Output() chartclick: EventEmitter<Flexmonster.ChartData> = new EventEmitter();\r\n  @Output() dataerror: EventEmitter<Flexmonster.ErrorEvent> = new EventEmitter();\r\n  @Output() datafilecancelled: EventEmitter<void> = new EventEmitter();\r\n  @Output() dataloaded: EventEmitter<void> = new EventEmitter();\r\n  @Output() datachanged: EventEmitter<Object> = new EventEmitter();\r\n  @Output() fieldslistclose: EventEmitter<void> = new EventEmitter();\r\n  @Output() fieldslistopen: EventEmitter<void> = new EventEmitter();\r\n  @Output() filterclose: EventEmitter<void> = new EventEmitter();\r\n  @Output() filteropen: EventEmitter<Object> = new EventEmitter();\r\n  @Output() drillthroughopen: EventEmitter<Flexmonster.CellData | Flexmonster.ChartData> = new EventEmitter();\r\n  @Output() exportcomplete: EventEmitter<void> = new EventEmitter();\r\n  @Output() exportstart: EventEmitter<void> = new EventEmitter();\r\n  @Output() drillthroughclose: EventEmitter<void> = new EventEmitter();\r\n  @Output() fullscreen: EventEmitter<void> = new EventEmitter();\r\n  @Output() loadingdata: EventEmitter<void> = new EventEmitter();\r\n  @Output() loadinglocalization: EventEmitter<void> = new EventEmitter();\r\n  @Output() loadingolapstructure: EventEmitter<void> = new EventEmitter();\r\n  @Output() loadingreportfile: EventEmitter<void> = new EventEmitter();\r\n  @Output() localizationerror: EventEmitter<void> = new EventEmitter();\r\n  @Output() localizationloaded: EventEmitter<void> = new EventEmitter();\r\n  @Output() olapstructureerror: EventEmitter<Flexmonster.ErrorEvent> = new EventEmitter();\r\n  @Output() olapstructureloaded: EventEmitter<void> = new EventEmitter();\r\n  @Output() openingreportfile: EventEmitter<void> = new EventEmitter();\r\n  @Output() printcomplete: EventEmitter<void> = new EventEmitter();\r\n  @Output() printstart: EventEmitter<void> = new EventEmitter();\r\n  @Output() querycomplete: EventEmitter<void> = new EventEmitter();\r\n  @Output() queryerror: EventEmitter<Flexmonster.ErrorEvent> = new EventEmitter();\r\n  @Output() ready: EventEmitter<Flexmonster.Pivot> = new EventEmitter();\r\n  @Output() reportchange: EventEmitter<void> = new EventEmitter();\r\n  @Output() reportcomplete: EventEmitter<void> = new EventEmitter();\r\n  @Output() reportfilecancelled: EventEmitter<void> = new EventEmitter();\r\n  @Output() reportfileerror: EventEmitter<void> = new EventEmitter();\r\n  @Output() runningquery: EventEmitter<void> = new EventEmitter();\r\n  @Output() unauthorizederror: EventEmitter<Flexmonster.UnauthorizedErrorHandler> = new EventEmitter();\r\n  @Output() update: EventEmitter<void> = new EventEmitter();\r\n  @Output() beforetoolbarcreated: EventEmitter<Flexmonster.Toolbar> = new EventEmitter();\r\n  @Output() beforegriddraw: EventEmitter<Object> = new EventEmitter();\r\n  @Output() aftergriddraw: EventEmitter<Object> = new EventEmitter();\r\n  @Output() afterchartdraw: EventEmitter<void> = new EventEmitter();\r\n  // api\r\n  public flexmonster: Flexmonster.Pivot;\r\n  // private\r\n  private root: HTMLElement;\r\n\r\n  constructor(el: ElementRef) {\r\n    this.root = <HTMLElement>el.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.flexmonster = new Flexmonster({\r\n      container: this.root.getElementsByClassName('fm-ng-wrapper')[0],\r\n      componentFolder: this.componentFolder,\r\n      width: this.width,\r\n      height: this.height,\r\n      toolbar: this.toolbar,\r\n      licenseKey: this.licenseKey,\r\n      licenseFilePath: this.licenseFilePath,\r\n      report: this.report,\r\n      global: this.global,\r\n      accessibility: this.accessibility,\r\n      shareReportConnection: this.shareReportConnection,\r\n      customizeAPIRequest: this.customizeAPIRequest,\r\n      customizeCell: this.customizeCell,\r\n      customizeChartElement: this.customizeChartElement,\r\n      customizeContextMenu: this.customizeContextMenu,\r\n      sortFieldsList: this.sortFieldsList,\r\n      cellclick: (cell: Flexmonster.CellData) => this.cellclick.next(cell),\r\n      celldoubleclick: (cell: Flexmonster.CellData) => this.celldoubleclick.next(cell),\r\n      chartclick: (event: Flexmonster.ChartData) => this.chartclick.next(event),\r\n      datachanged: (event: Object) => this.datachanged.next(event),\r\n      dataerror: (event: Object) => this.dataerror.next(event),\r\n      datafilecancelled: () => this.datafilecancelled.next(),\r\n      dataloaded: () => this.dataloaded.next(),\r\n      fieldslistclose: () => this.fieldslistclose.next(),\r\n      fieldslistopen: () => this.fieldslistopen.next(),\r\n      filterclose: () => this.filterclose.next(),\r\n      filteropen: (event: Object) => this.filteropen.next(event),\r\n      drillthroughopen: (cell: Flexmonster.CellData | Flexmonster.ChartData) => this.drillthroughopen.next(cell),\r\n      exportcomplete: () => this.exportcomplete.next(),\r\n      exportstart: () => this.exportstart.next(),\r\n      drillthroughclose: () => this.drillthroughclose.next(),\r\n      loadingdata: () => this.loadingdata.next(),\r\n      loadinglocalization: () => this.loadinglocalization.next(),\r\n      loadingolapstructure: () => this.loadingolapstructure.next(),\r\n      loadingreportfile: () => this.loadingreportfile.next(),\r\n      localizationerror: () => this.localizationerror.next(),\r\n      localizationloaded: () => this.localizationloaded.next(),\r\n      olapstructureerror: (event: Flexmonster.ErrorEvent) => this.olapstructureerror.next(event),\r\n      olapstructureloaded: () => this.olapstructureloaded.next(),\r\n      openingreportfile: () => this.openingreportfile.next(),\r\n      printcomplete: () => this.printcomplete.next(),\r\n      printstart: () => this.printstart.next(),\r\n      querycomplete: () => this.querycomplete.next(),\r\n      queryerror: (event: Flexmonster.ErrorEvent) => this.queryerror.next(event),\r\n      ready: () => this.ready.next(this.flexmonster),\r\n      reportchange: () => this.reportchange.next(),\r\n      reportcomplete: () => this.reportcomplete.next(),\r\n      reportfilecancelled: () => this.reportfilecancelled.next(),\r\n      reportfileerror: () => this.reportfileerror.next(),\r\n      runningquery: () => this.runningquery.next(),\r\n      unauthorizederror: (done: Flexmonster.UnauthorizedErrorHandler) => this.unauthorizederror.next(done),\r\n      update: () => this.update.next(),\r\n      beforetoolbarcreated: (toolbar: Flexmonster.Toolbar) => this.beforetoolbarcreated.next(toolbar),\r\n      beforegriddraw: (event: Object) => this.beforegriddraw.next(event),\r\n      aftergriddraw: (event: Object) => this.aftergriddraw.next(event),\r\n      afterchartdraw: () => this.afterchartdraw.next()\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexmonsterPivot } from './flexmonster.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [FlexmonsterPivot],\r\n  exports: [FlexmonsterPivot]\r\n})\r\nexport class FlexmonsterPivotModule { }\r\n"]}