(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('flexmonster'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-flexmonster', ['exports', '@angular/core', 'flexmonster', '@angular/common'], factory) :
    (factory((global['ng-flexmonster'] = {}),global.ng.core,null,global.ng.common));
}(this, (function (exports,core,Flexmonster,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var FlexmonsterPivot = /** @class */ (function () {
        function FlexmonsterPivot(el) {
            // events
            this.cellclick = new core.EventEmitter();
            this.celldoubleclick = new core.EventEmitter();
            this.chartclick = new core.EventEmitter();
            this.dataerror = new core.EventEmitter();
            this.datafilecancelled = new core.EventEmitter();
            this.dataloaded = new core.EventEmitter();
            this.datachanged = new core.EventEmitter();
            this.fieldslistclose = new core.EventEmitter();
            this.fieldslistopen = new core.EventEmitter();
            this.filterclose = new core.EventEmitter();
            this.filteropen = new core.EventEmitter();
            this.drillthroughopen = new core.EventEmitter();
            this.exportcomplete = new core.EventEmitter();
            this.exportstart = new core.EventEmitter();
            this.drillthroughclose = new core.EventEmitter();
            this.fullscreen = new core.EventEmitter();
            this.loadingdata = new core.EventEmitter();
            this.loadinglocalization = new core.EventEmitter();
            this.loadingolapstructure = new core.EventEmitter();
            this.loadingreportfile = new core.EventEmitter();
            this.localizationerror = new core.EventEmitter();
            this.localizationloaded = new core.EventEmitter();
            this.olapstructureerror = new core.EventEmitter();
            this.olapstructureloaded = new core.EventEmitter();
            this.openingreportfile = new core.EventEmitter();
            this.printcomplete = new core.EventEmitter();
            this.printstart = new core.EventEmitter();
            this.querycomplete = new core.EventEmitter();
            this.queryerror = new core.EventEmitter();
            this.ready = new core.EventEmitter();
            this.reportchange = new core.EventEmitter();
            this.reportcomplete = new core.EventEmitter();
            this.reportfilecancelled = new core.EventEmitter();
            this.reportfileerror = new core.EventEmitter();
            this.runningquery = new core.EventEmitter();
            this.unauthorizederror = new core.EventEmitter();
            this.update = new core.EventEmitter();
            this.beforetoolbarcreated = new core.EventEmitter();
            this.beforegriddraw = new core.EventEmitter();
            this.aftergriddraw = new core.EventEmitter();
            this.afterchartdraw = new core.EventEmitter();
            this.root = ( /** @type {?} */(el.nativeElement));
        }
        /**
         * @return {?}
         */
        FlexmonsterPivot.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.flexmonster = new Flexmonster({
                    container: this.root.getElementsByClassName('fm-ng-wrapper')[0],
                    componentFolder: this.componentFolder,
                    width: this.width,
                    height: this.height,
                    toolbar: this.toolbar,
                    licenseKey: this.licenseKey,
                    licenseFilePath: this.licenseFilePath,
                    report: this.report,
                    global: this.global,
                    accessibility: this.accessibility,
                    shareReportConnection: this.shareReportConnection,
                    customizeAPIRequest: this.customizeAPIRequest,
                    customizeCell: this.customizeCell,
                    customizeChartElement: this.customizeChartElement,
                    customizeContextMenu: this.customizeContextMenu,
                    sortFieldsList: this.sortFieldsList,
                    cellclick: function (cell) { return _this.cellclick.next(cell); },
                    celldoubleclick: function (cell) { return _this.celldoubleclick.next(cell); },
                    chartclick: function (event) { return _this.chartclick.next(event); },
                    datachanged: function (event) { return _this.datachanged.next(event); },
                    dataerror: function (event) { return _this.dataerror.next(event); },
                    datafilecancelled: function () { return _this.datafilecancelled.next(); },
                    dataloaded: function () { return _this.dataloaded.next(); },
                    fieldslistclose: function () { return _this.fieldslistclose.next(); },
                    fieldslistopen: function () { return _this.fieldslistopen.next(); },
                    filterclose: function () { return _this.filterclose.next(); },
                    filteropen: function (event) { return _this.filteropen.next(event); },
                    drillthroughopen: function (cell) { return _this.drillthroughopen.next(cell); },
                    exportcomplete: function () { return _this.exportcomplete.next(); },
                    exportstart: function () { return _this.exportstart.next(); },
                    drillthroughclose: function () { return _this.drillthroughclose.next(); },
                    loadingdata: function () { return _this.loadingdata.next(); },
                    loadinglocalization: function () { return _this.loadinglocalization.next(); },
                    loadingolapstructure: function () { return _this.loadingolapstructure.next(); },
                    loadingreportfile: function () { return _this.loadingreportfile.next(); },
                    localizationerror: function () { return _this.localizationerror.next(); },
                    localizationloaded: function () { return _this.localizationloaded.next(); },
                    olapstructureerror: function (event) { return _this.olapstructureerror.next(event); },
                    olapstructureloaded: function () { return _this.olapstructureloaded.next(); },
                    openingreportfile: function () { return _this.openingreportfile.next(); },
                    printcomplete: function () { return _this.printcomplete.next(); },
                    printstart: function () { return _this.printstart.next(); },
                    querycomplete: function () { return _this.querycomplete.next(); },
                    queryerror: function (event) { return _this.queryerror.next(event); },
                    ready: function () { return _this.ready.next(_this.flexmonster); },
                    reportchange: function () { return _this.reportchange.next(); },
                    reportcomplete: function () { return _this.reportcomplete.next(); },
                    reportfilecancelled: function () { return _this.reportfilecancelled.next(); },
                    reportfileerror: function () { return _this.reportfileerror.next(); },
                    runningquery: function () { return _this.runningquery.next(); },
                    unauthorizederror: function (done) { return _this.unauthorizederror.next(done); },
                    update: function () { return _this.update.next(); },
                    beforetoolbarcreated: function (toolbar) { return _this.beforetoolbarcreated.next(toolbar); },
                    beforegriddraw: function (event) { return _this.beforegriddraw.next(event); },
                    aftergriddraw: function (event) { return _this.aftergriddraw.next(event); },
                    afterchartdraw: function () { return _this.afterchartdraw.next(); }
                });
            };
        FlexmonsterPivot.decorators = [
            { type: core.Component, args: [{
                        selector: 'fm-pivot',
                        template: '<div style="width:100%;height:100%;"><div class="fm-ng-wrapper"></div></div>'
                    },] },
        ];
        FlexmonsterPivot.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        FlexmonsterPivot.propDecorators = {
            toolbar: [{ type: core.Input }],
            licenseKey: [{ type: core.Input }],
            licenseFilePath: [{ type: core.Input }],
            width: [{ type: core.Input }],
            height: [{ type: core.Input }],
            componentFolder: [{ type: core.Input }],
            report: [{ type: core.Input }],
            shareReportConnection: [{ type: core.Input }],
            global: [{ type: core.Input }],
            accessibility: [{ type: core.Input }],
            customizeAPIRequest: [{ type: core.Input }],
            customizeCell: [{ type: core.Input }],
            customizeChartElement: [{ type: core.Input }],
            customizeContextMenu: [{ type: core.Input }],
            sortFieldsList: [{ type: core.Input }],
            cellclick: [{ type: core.Output }],
            celldoubleclick: [{ type: core.Output }],
            chartclick: [{ type: core.Output }],
            dataerror: [{ type: core.Output }],
            datafilecancelled: [{ type: core.Output }],
            dataloaded: [{ type: core.Output }],
            datachanged: [{ type: core.Output }],
            fieldslistclose: [{ type: core.Output }],
            fieldslistopen: [{ type: core.Output }],
            filterclose: [{ type: core.Output }],
            filteropen: [{ type: core.Output }],
            drillthroughopen: [{ type: core.Output }],
            exportcomplete: [{ type: core.Output }],
            exportstart: [{ type: core.Output }],
            drillthroughclose: [{ type: core.Output }],
            fullscreen: [{ type: core.Output }],
            loadingdata: [{ type: core.Output }],
            loadinglocalization: [{ type: core.Output }],
            loadingolapstructure: [{ type: core.Output }],
            loadingreportfile: [{ type: core.Output }],
            localizationerror: [{ type: core.Output }],
            localizationloaded: [{ type: core.Output }],
            olapstructureerror: [{ type: core.Output }],
            olapstructureloaded: [{ type: core.Output }],
            openingreportfile: [{ type: core.Output }],
            printcomplete: [{ type: core.Output }],
            printstart: [{ type: core.Output }],
            querycomplete: [{ type: core.Output }],
            queryerror: [{ type: core.Output }],
            ready: [{ type: core.Output }],
            reportchange: [{ type: core.Output }],
            reportcomplete: [{ type: core.Output }],
            reportfilecancelled: [{ type: core.Output }],
            reportfileerror: [{ type: core.Output }],
            runningquery: [{ type: core.Output }],
            unauthorizederror: [{ type: core.Output }],
            update: [{ type: core.Output }],
            beforetoolbarcreated: [{ type: core.Output }],
            beforegriddraw: [{ type: core.Output }],
            aftergriddraw: [{ type: core.Output }],
            afterchartdraw: [{ type: core.Output }]
        };
        return FlexmonsterPivot;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */
    var FlexmonsterPivotModule = /** @class */ (function () {
        function FlexmonsterPivotModule() {
        }
        FlexmonsterPivotModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [FlexmonsterPivot],
                        exports: [FlexmonsterPivot]
                    },] },
        ];
        return FlexmonsterPivotModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
     */

    exports.FlexmonsterPivotModule = FlexmonsterPivotModule;
    exports.FlexmonsterPivot = FlexmonsterPivot;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,