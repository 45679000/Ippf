import { Component, ElementRef, Input, Output, EventEmitter, NgModule } from '@angular/core';
import * as Flexmonster from 'flexmonster';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var FlexmonsterPivot = /** @class */ (function () {
    function FlexmonsterPivot(el) {
        // events
        this.cellclick = new EventEmitter();
        this.celldoubleclick = new EventEmitter();
        this.chartclick = new EventEmitter();
        this.dataerror = new EventEmitter();
        this.datafilecancelled = new EventEmitter();
        this.dataloaded = new EventEmitter();
        this.datachanged = new EventEmitter();
        this.fieldslistclose = new EventEmitter();
        this.fieldslistopen = new EventEmitter();
        this.filterclose = new EventEmitter();
        this.filteropen = new EventEmitter();
        this.drillthroughopen = new EventEmitter();
        this.exportcomplete = new EventEmitter();
        this.exportstart = new EventEmitter();
        this.drillthroughclose = new EventEmitter();
        this.fullscreen = new EventEmitter();
        this.loadingdata = new EventEmitter();
        this.loadinglocalization = new EventEmitter();
        this.loadingolapstructure = new EventEmitter();
        this.loadingreportfile = new EventEmitter();
        this.localizationerror = new EventEmitter();
        this.localizationloaded = new EventEmitter();
        this.olapstructureerror = new EventEmitter();
        this.olapstructureloaded = new EventEmitter();
        this.openingreportfile = new EventEmitter();
        this.printcomplete = new EventEmitter();
        this.printstart = new EventEmitter();
        this.querycomplete = new EventEmitter();
        this.queryerror = new EventEmitter();
        this.ready = new EventEmitter();
        this.reportchange = new EventEmitter();
        this.reportcomplete = new EventEmitter();
        this.reportfilecancelled = new EventEmitter();
        this.reportfileerror = new EventEmitter();
        this.runningquery = new EventEmitter();
        this.unauthorizederror = new EventEmitter();
        this.update = new EventEmitter();
        this.beforetoolbarcreated = new EventEmitter();
        this.beforegriddraw = new EventEmitter();
        this.aftergriddraw = new EventEmitter();
        this.afterchartdraw = new EventEmitter();
        this.root = (/** @type {?} */ (el.nativeElement));
    }
    /**
     * @return {?}
     */
    FlexmonsterPivot.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.flexmonster = new Flexmonster({
            container: this.root.getElementsByClassName('fm-ng-wrapper')[0],
            componentFolder: this.componentFolder,
            width: this.width,
            height: this.height,
            toolbar: this.toolbar,
            licenseKey: this.licenseKey,
            licenseFilePath: this.licenseFilePath,
            report: this.report,
            global: this.global,
            accessibility: this.accessibility,
            shareReportConnection: this.shareReportConnection,
            customizeAPIRequest: this.customizeAPIRequest,
            customizeCell: this.customizeCell,
            customizeChartElement: this.customizeChartElement,
            customizeContextMenu: this.customizeContextMenu,
            sortFieldsList: this.sortFieldsList,
            cellclick: function (cell) { return _this.cellclick.next(cell); },
            celldoubleclick: function (cell) { return _this.celldoubleclick.next(cell); },
            chartclick: function (event) { return _this.chartclick.next(event); },
            datachanged: function (event) { return _this.datachanged.next(event); },
            dataerror: function (event) { return _this.dataerror.next(event); },
            datafilecancelled: function () { return _this.datafilecancelled.next(); },
            dataloaded: function () { return _this.dataloaded.next(); },
            fieldslistclose: function () { return _this.fieldslistclose.next(); },
            fieldslistopen: function () { return _this.fieldslistopen.next(); },
            filterclose: function () { return _this.filterclose.next(); },
            filteropen: function (event) { return _this.filteropen.next(event); },
            drillthroughopen: function (cell) { return _this.drillthroughopen.next(cell); },
            exportcomplete: function () { return _this.exportcomplete.next(); },
            exportstart: function () { return _this.exportstart.next(); },
            drillthroughclose: function () { return _this.drillthroughclose.next(); },
            loadingdata: function () { return _this.loadingdata.next(); },
            loadinglocalization: function () { return _this.loadinglocalization.next(); },
            loadingolapstructure: function () { return _this.loadingolapstructure.next(); },
            loadingreportfile: function () { return _this.loadingreportfile.next(); },
            localizationerror: function () { return _this.localizationerror.next(); },
            localizationloaded: function () { return _this.localizationloaded.next(); },
            olapstructureerror: function (event) { return _this.olapstructureerror.next(event); },
            olapstructureloaded: function () { return _this.olapstructureloaded.next(); },
            openingreportfile: function () { return _this.openingreportfile.next(); },
            printcomplete: function () { return _this.printcomplete.next(); },
            printstart: function () { return _this.printstart.next(); },
            querycomplete: function () { return _this.querycomplete.next(); },
            queryerror: function (event) { return _this.queryerror.next(event); },
            ready: function () { return _this.ready.next(_this.flexmonster); },
            reportchange: function () { return _this.reportchange.next(); },
            reportcomplete: function () { return _this.reportcomplete.next(); },
            reportfilecancelled: function () { return _this.reportfilecancelled.next(); },
            reportfileerror: function () { return _this.reportfileerror.next(); },
            runningquery: function () { return _this.runningquery.next(); },
            unauthorizederror: function (done) { return _this.unauthorizederror.next(done); },
            update: function () { return _this.update.next(); },
            beforetoolbarcreated: function (toolbar) { return _this.beforetoolbarcreated.next(toolbar); },
            beforegriddraw: function (event) { return _this.beforegriddraw.next(event); },
            aftergriddraw: function (event) { return _this.aftergriddraw.next(event); },
            afterchartdraw: function () { return _this.afterchartdraw.next(); }
        });
    };
    FlexmonsterPivot.decorators = [
        { type: Component, args: [{
                    selector: 'fm-pivot',
                    template: '<div style="width:100%;height:100%;"><div class="fm-ng-wrapper"></div></div>'
                },] },
    ];
    FlexmonsterPivot.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FlexmonsterPivot.propDecorators = {
        toolbar: [{ type: Input }],
        licenseKey: [{ type: Input }],
        licenseFilePath: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        componentFolder: [{ type: Input }],
        report: [{ type: Input }],
        shareReportConnection: [{ type: Input }],
        global: [{ type: Input }],
        accessibility: [{ type: Input }],
        customizeAPIRequest: [{ type: Input }],
        customizeCell: [{ type: Input }],
        customizeChartElement: [{ type: Input }],
        customizeContextMenu: [{ type: Input }],
        sortFieldsList: [{ type: Input }],
        cellclick: [{ type: Output }],
        celldoubleclick: [{ type: Output }],
        chartclick: [{ type: Output }],
        dataerror: [{ type: Output }],
        datafilecancelled: [{ type: Output }],
        dataloaded: [{ type: Output }],
        datachanged: [{ type: Output }],
        fieldslistclose: [{ type: Output }],
        fieldslistopen: [{ type: Output }],
        filterclose: [{ type: Output }],
        filteropen: [{ type: Output }],
        drillthroughopen: [{ type: Output }],
        exportcomplete: [{ type: Output }],
        exportstart: [{ type: Output }],
        drillthroughclose: [{ type: Output }],
        fullscreen: [{ type: Output }],
        loadingdata: [{ type: Output }],
        loadinglocalization: [{ type: Output }],
        loadingolapstructure: [{ type: Output }],
        loadingreportfile: [{ type: Output }],
        localizationerror: [{ type: Output }],
        localizationloaded: [{ type: Output }],
        olapstructureerror: [{ type: Output }],
        olapstructureloaded: [{ type: Output }],
        openingreportfile: [{ type: Output }],
        printcomplete: [{ type: Output }],
        printstart: [{ type: Output }],
        querycomplete: [{ type: Output }],
        queryerror: [{ type: Output }],
        ready: [{ type: Output }],
        reportchange: [{ type: Output }],
        reportcomplete: [{ type: Output }],
        reportfilecancelled: [{ type: Output }],
        reportfileerror: [{ type: Output }],
        runningquery: [{ type: Output }],
        unauthorizederror: [{ type: Output }],
        update: [{ type: Output }],
        beforetoolbarcreated: [{ type: Output }],
        beforegriddraw: [{ type: Output }],
        aftergriddraw: [{ type: Output }],
        afterchartdraw: [{ type: Output }]
    };
    return FlexmonsterPivot;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var FlexmonsterPivotModule = /** @class */ (function () {
    function FlexmonsterPivotModule() {
    }
    FlexmonsterPivotModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [FlexmonsterPivot],
                    exports: [FlexmonsterPivot]
                },] },
    ];
    return FlexmonsterPivotModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { FlexmonsterPivotModule, FlexmonsterPivot };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,